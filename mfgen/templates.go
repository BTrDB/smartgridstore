// Code generated by go-bindata.
// sources:
// ../manifest_templates/adminconsole.deployment.yaml
// ../manifest_templates/btrdb.statefulset.yaml
// ../manifest_templates/c37ingress.deployment.yaml
// ../manifest_templates/create_admin_key.sh
// ../manifest_templates/createdb.job.yaml
// ../manifest_templates/etcd-operator.deployment.yaml
// ../manifest_templates/etcd.cluster.yaml
// ../manifest_templates/etcd.clusterrole.yaml
// ../manifest_templates/etcd.clusterrolebinding.yaml
// ../manifest_templates/etcd.serviceaccount.yaml
// ../manifest_templates/ingester.deployment.yaml
// ../manifest_templates/mrplotter.deployment.yaml
// ../manifest_templates/pmu2btrdb.deployment.yaml
// ../manifest_templates/readme.md
// ../manifest_templates/receiver.deployment.yaml
// ../manifest_templates/secret_ceph_keyring.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _adminconsoleDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xd1\x8f\xda\x3e\x0c\xc7\xdf\xfb\x57\x58\xfa\x3d\xb7\xfd\xc1\x4e\x9a\x96\xc7\x03\x34\x21\x6d\x5c\x35\xd0\x5e\x27\x93\xfa\x20\xba\x34\x89\x12\x53\x1d\xaa\xfa\xbf\x4f\x29\x50\x5a\xc6\xc6\xa4\xe5\x29\x89\xed\x8f\xbf\x76\xea\xfe\x07\x4d\x03\xd9\x67\x32\x5f\x94\x21\x68\xdb\x04\x9d\xfa\x4e\x3e\x28\x6b\x04\xd0\x3b\x93\x89\xdb\x90\xd7\x93\x2d\x31\x4e\x92\x37\x65\x4a\x01\x73\x72\xda\x1e\x2b\x32\x9c\x54\xc4\x58\x22\xa3\x48\x00\x0c\x56\x24\x40\x5a\x13\xac\xa6\xf3\x39\x38\x94\x24\xa0\x69\xb2\x0d\xfa\x1d\xf1\xea\x72\xd7\xb6\x49\x70\x24\x63\x9c\x27\xa7\x95\xc4\x20\x60\x92\x00\x30\x55\x4e\x23\x53\xb4\x00\x0c\xf9\x71\x69\xdc\x92\x0e\x97\x13\x00\x3a\x37\x4c\x09\x70\x81\xc6\x25\xad\x61\x54\x86\x7c\x1f\x90\xfe\x22\xf2\xb4\x54\x85\x3b\x12\xb0\x65\x5f\x6e\xf3\xa6\xc9\x8a\xd7\xf7\xb6\x3d\x3b\x89\x5e\xfc\xb9\x33\x6d\x3b\x8e\x2b\x0e\x5a\x17\x56\x2b\x79\xec\x0a\x9d\xf5\x59\xb3\xe5\xd8\x3c\x08\x24\x53\x5f\x8b\xb8\xea\x5a\x6c\x66\xf3\x1f\x8b\xd5\xbc\x78\x59\xae\x36\x03\x3b\x40\x8d\xfa\x40\x02\xf6\xcc\x4e\xe4\x39\xb1\x2c\x53\xa9\x15\x19\x16\xd3\x0f\x1f\x3f\xdd\x41\x3d\x6f\xbe\xcd\x9f\x7b\xd6\xfa\x1e\xac\x2b\x37\xdd\x5a\xcb\x81\x3d\x3a\xf1\xf4\x34\xf9\xbf\xf7\xab\xad\x3e\x54\xf4\xd5\x1e\x0c\x87\x7b\x52\x25\xb9\x7d\xfa\x46\x47\xaf\xcc\x6e\x04\xaf\x62\x48\x81\xbc\x17\x10\x75\xe6\xd1\x31\x1f\x79\x78\xc2\xf2\xc5\xe8\xa3\x00\xf6\x07\xba\xc3\xc6\xb2\x52\x26\xdd\xdb\xc0\x31\xc3\x1f\xe9\x9d\x6b\x20\x5f\x93\xff\xab\x24\xce\xfa\xdb\x7a\xfa\xcf\xa4\xb0\x9e\x05\x4c\xa7\xd3\xe9\x88\xe4\xbc\x65\x2b\xad\x16\xb0\x99\x15\x23\xcb\x40\x6d\xe4\x26\xc3\xce\x0d\x92\x3c\x68\x59\x20\xe9\x89\xc5\x88\x7c\xba\x5b\xfd\x3e\xec\x61\xab\x1e\x51\x6f\x02\xd3\x34\x1d\x0d\x7f\x7d\x19\xf6\x35\xf9\x5a\x49\xfa\xa7\x49\x1f\xcf\xed\x68\x66\x2f\xf3\xda\xbf\x4b\xda\x6d\x07\xcf\xc0\x1d\xee\xf4\x36\xe3\x56\xdf\xca\x88\x3f\x2c\x6f\x50\x2f\x8b\x20\x9a\xc6\xa3\xd9\x11\x64\x6b\xc5\xb4\x34\xaf\x36\x5b\x5c\xad\x9d\xa4\x34\x6a\x6d\xdb\xa6\x21\x53\x76\x17\x81\x34\x49\xb6\xfe\x8e\xca\x9f\x01\x00\x00\xff\xff\xec\xd9\x63\x47\x28\x05\x00\x00")

func adminconsoleDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_adminconsoleDeploymentYaml,
		"adminconsole.deployment.yaml",
	)
}

func adminconsoleDeploymentYaml() (*asset, error) {
	bytes, err := adminconsoleDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "adminconsole.deployment.yaml", size: 1320, mode: os.FileMode(436), modTime: time.Unix(1500240796, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _btrdbStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x8f\xe2\x38\x10\xbd\xe7\x57\x94\x98\x33\x21\xf4\x8c\xb4\x9a\xdc\x20\xb0\x03\xda\x6e\x88\xba\xa3\x59\xed\x29\x32\x4e\x41\xac\x76\x6c\xaf\x5d\xa1\x17\x21\xfe\xfb\x2a\x09\x64\x13\x06\x7a\x67\xf6\xc3\xa7\xa4\xaa\xde\x7b\x7e\x15\x3b\xf5\x01\x8e\x47\xf0\xbf\xa0\x7a\x14\x0a\xe1\x74\xf2\x86\xc3\xa1\xc7\x8c\xf8\x8a\xd6\x09\xad\x42\xd8\x8f\xbd\x57\xa1\xb2\x10\x5e\xd0\xee\x05\x47\xaf\x40\x62\x19\x23\x16\x7a\x00\x8a\x15\x18\xc2\x86\x6c\xb6\x39\xbf\x39\xc3\x38\x86\x70\x3c\xfa\x09\xb3\x3b\xa4\xd5\x25\x76\x3a\x79\x00\x92\x6d\x50\xba\x0a\x09\xc0\x8c\xb9\x40\x9d\x41\x5e\x05\x8d\xb6\x54\x67\x87\xf5\x63\x08\x9f\x3e\x8d\x83\xba\xb8\x11\xda\x59\xc3\x3b\xd9\xcf\x41\xd0\xcd\xe6\x44\xc6\x03\xe0\xb2\x74\x84\x76\x19\x87\xb0\xd2\x0a\x3d\x00\x87\x12\x39\x69\xfb\x8d\xee\xb5\x57\x66\x8c\x1b\xed\xc7\x1b\x24\xd6\xba\x26\x46\xb8\x2d\xe5\x0b\xd2\xbf\x70\x7e\x31\xe8\x9a\x1e\xae\x6a\xf0\xa0\x46\x0f\x3c\x00\x8b\x46\x0a\xce\x5c\x08\x63\x0f\x80\xb0\x30\x92\x11\x36\xdb\xed\x8a\x56\xab\xdb\xc2\x2b\x3b\xd5\xeb\x45\xa9\x5a\x5c\x2b\x62\x42\xa1\x6d\xcb\x87\x57\xfb\x6e\x96\x28\xd8\xee\x12\x1c\x1d\x8f\x7e\xbc\xfd\xe3\x74\xca\x36\x61\x6b\xe5\xdc\xa0\xfa\x13\x76\x20\x71\x29\x65\xac\xa5\xe0\x87\xda\x76\xd4\xca\xf9\xcb\x7e\xba\x03\xb4\xe8\x74\x69\x39\x76\x1c\x54\xc1\xdf\x4b\x74\xd4\x8b\x01\x70\x53\x86\x30\x18\x07\x83\x5e\xf4\x03\xf0\x9c\xa9\x9d\x50\x3b\xa0\x5c\x38\x28\xb0\xd0\xf6\x00\x52\x14\x82\xe0\x4d\x48\x09\x4a\x53\x53\x83\x90\xeb\x37\x28\x4a\x9e\x9f\xab\xae\x88\x6a\xc3\x40\x56\xa0\x03\xd2\x50\x3a\xf4\x21\xc9\x19\x81\x70\x40\x6f\xc8\x5e\x31\x83\xcd\x01\xa6\x8f\xeb\xe8\x97\x34\x9a\x44\x8b\x39\x6c\x50\xea\xb7\x1e\x4d\xc3\x1c\xc2\xc7\x87\x2f\xa2\x4d\xa0\xda\x77\xbd\x5c\xda\x3e\x4f\xa2\x59\x3a\x5f\xcd\xe2\xf5\x72\x95\xa4\x41\x8f\x67\xcf\x64\x79\x3e\xc4\xe1\x68\x84\xc4\xb3\x61\x10\x04\x81\x5f\x3d\x85\x0f\x1f\x7f\xfa\xfc\xb7\x7c\xe3\xef\xe0\x1b\xff\x00\xdf\xc3\x77\xf0\x3d\xbc\xcb\x17\xcd\xe3\x45\xba\x58\x27\x69\xbc\x5e\x3f\xde\x62\x3b\x1e\xfd\x17\x41\xb8\x54\x5b\xed\x47\x68\x72\x7f\x9a\xd8\xd9\x74\xa1\x29\xd6\x5a\x76\x4e\xcd\x15\xe5\x6c\x92\x4c\x7e\x90\x73\xc6\x88\xdd\x25\x9d\x26\xcf\xb3\x69\xda\xf9\xce\xb7\x78\x07\xe3\xa0\x5e\x83\xbb\x04\xf3\xd5\x64\xfa\x38\x4f\xd7\x5f\xe7\xcf\xbf\x4e\x92\x68\x71\x93\xe5\x80\xee\x16\xc3\xd3\x6f\x69\xbc\x9e\xa5\xab\xc9\xd3\x0d\xf1\x9f\xad\x2e\xfa\x77\x03\x60\x2b\x50\x66\xcf\xb8\xbd\x8e\x9f\x33\x31\xa3\x3c\x6c\x7f\x1e\x7e\x25\x72\x5f\x75\x19\xff\x87\x9a\x8e\x18\x95\xce\x37\x3a\xeb\xd0\xee\xb5\x2c\x0b\x7c\xd2\xa5\xea\xdf\xf2\xcb\x46\x38\x9a\x7c\xf8\x8a\x07\x2b\xd4\xae\x7f\xbd\x2a\x48\x43\x5c\x1d\xba\x51\x55\x38\xea\x55\x58\x64\xd9\x5a\xc9\x43\x08\x64\xcb\xbf\x4c\xb6\xb3\xe4\x22\xd4\xfe\x0d\xe3\xfe\x68\x39\x97\x5b\x4d\x9a\x6b\x19\x42\x12\xc5\xf7\x51\xed\xc8\xb9\x8f\x6a\xac\xf6\xa4\xdf\xf5\xe8\x90\x5b\xa4\x7e\x4b\x9b\xd8\xea\x5b\xd8\x3f\x9d\xce\xc3\x8d\xd6\xe4\xc8\x32\xf3\xff\xce\x69\xaa\xc9\xe2\x77\x86\xf7\xdd\x61\xfc\x67\x00\x00\x00\xff\xff\x5f\x03\x59\x06\x8a\x08\x00\x00")

func btrdbStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_btrdbStatefulsetYaml,
		"btrdb.statefulset.yaml",
	)
}

func btrdbStatefulsetYaml() (*asset, error) {
	bytes, err := btrdbStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "btrdb.statefulset.yaml", size: 2186, mode: os.FileMode(436), modTime: time.Unix(1500240783, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _c37ingressDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x50\xc1\x6e\xea\x30\x10\xbc\xfb\x2b\x56\x7a\x67\x92\x97\x82\x84\xea\x23\x04\x55\x48\x15\x8d\xda\xa8\xd7\x6a\xe3\x6c\xa9\x55\xc7\xb1\xec\x05\x81\x22\xff\x7b\x15\x0a\x01\xaa\xcc\xc9\xde\xf1\xcc\xec\xf8\x1f\x74\x1d\x24\x4f\x64\x9f\xb5\x25\x88\x51\xa0\xd3\xef\xe4\x83\x6e\xad\x04\x3a\x30\xd9\xfe\x18\xd2\x7d\x56\x11\x63\x26\xbe\xb5\xad\x25\xe4\xe4\x4c\x7b\x6c\xc8\xb2\x68\x88\xb1\x46\x46\x29\x00\x2c\x36\x24\x41\x4d\xe7\xda\x6e\x3d\x85\x70\x1e\x05\x87\x8a\x24\x74\x5d\x52\xa2\xdf\x12\x6f\x2e\xb3\x18\x45\x70\xa4\x7a\xa9\x27\x67\xb4\xc2\x20\x21\x13\x00\x4c\x8d\x33\xc8\xd4\x33\x00\xb7\x11\x3d\x0c\x56\x64\xc2\xe5\x06\x80\xce\xfd\x49\x05\xb8\xf8\xf6\x50\xad\x65\xd4\x96\xfc\xa0\x99\x8c\xad\xfa\x0b\xdd\xe0\x96\x24\x54\xec\xeb\x2a\xed\xba\xa4\xf8\x3c\xc4\x78\x7d\x27\x87\x16\xe7\x5f\x8a\xf1\x5e\x5a\xec\x8c\x29\x5a\xa3\xd5\xf1\xd4\x78\x39\x64\x27\xeb\x7b\xfa\x46\x48\x76\x7f\x6d\x73\xdd\x6e\x55\x2e\xf3\x8f\xd5\x26\x2f\x5e\xd6\x9b\xf2\x86\x07\xd8\xa3\xd9\x91\x84\x2f\x66\x27\xd3\x94\x58\xd5\xf2\x61\x3a\x7f\x1c\xf1\x58\x94\xaf\xf9\x62\x30\x79\x1b\x73\x39\x55\x9d\x54\x6d\xcb\x81\x3d\x3a\x39\x9b\x65\xff\xc5\x4f\x00\x00\x00\xff\xff\x72\x33\x58\x12\x18\x02\x00\x00")

func c37ingressDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_c37ingressDeploymentYaml,
		"c37ingress.deployment.yaml",
	)
}

func c37ingressDeploymentYaml() (*asset, error) {
	bytes, err := c37ingressDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "c37ingress.deployment.yaml", size: 536, mode: os.FileMode(436), modTime: time.Unix(1500238360, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _create_admin_keySh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xce\x41\x4e\xc3\x30\x10\x85\xe1\xbd\x4f\xf1\x68\x59\xc0\xc2\xed\x31\xd8\xa0\xae\xd8\x23\xd7\x7e\x89\xad\x24\x63\xcb\x33\x11\x54\x51\xee\x8e\x22\x95\x03\xfc\x9f\xfe\xf3\xcb\xf5\x5e\xe4\x7a\x0f\x9a\xdd\x19\xdb\x86\xcb\x07\xe5\xb3\x08\xb1\xef\xee\x6c\xb9\x28\x62\x67\x30\x2a\x02\x84\x3f\xc8\x55\x0d\x13\x1f\x18\x6a\x87\x65\x22\x56\xd1\x3a\x13\x41\x12\xda\x6a\x8a\x62\x28\x82\x70\x04\xca\xd8\x69\x4e\x69\xf0\xfc\x75\x6d\xd5\x9c\xf0\xfa\xb6\x4c\xc6\xa5\xc1\xa7\x77\xa7\x9a\xfd\xc4\xc7\x48\x81\x37\x74\x0d\xf0\x37\x9c\x4e\xf0\x03\x4a\xfa\xee\x1a\xdc\xb4\xde\x19\x6d\x7e\x6e\x3c\x49\x8c\x14\xf6\x12\xe1\x05\xdb\x76\xf9\x0a\x7d\xa4\xdd\xc2\x42\x6d\x21\x72\xdf\x11\xd2\x52\xc4\x1f\xb3\x07\x0f\xef\x87\x5e\x17\x3f\x94\x99\xff\x6e\xab\x2d\xb9\xbf\x00\x00\x00\xff\xff\xa2\x3b\x50\x44\xff\x00\x00\x00")

func create_admin_keyShBytes() ([]byte, error) {
	return bindataRead(
		_create_admin_keySh,
		"create_admin_key.sh",
	)
}

func create_admin_keySh() (*asset, error) {
	bytes, err := create_admin_keyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "create_admin_key.sh", size: 255, mode: os.FileMode(436), modTime: time.Unix(1500241197, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _createdbJobYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x5f\x6f\x9b\x30\x14\xc5\xdf\xf9\x14\x57\xed\xeb\x42\xd2\xee\x61\x9a\xdf\xda\x24\x5b\x33\xb5\x01\x6d\x68\xd2\x34\x4d\xe8\x02\x37\xc1\x2a\xd8\xc8\xbe\xd0\x46\x88\xef\x3e\xb9\x09\x2c\xf4\xcf\xda\xfa\xc9\xb9\xf7\x9c\xdf\xb1\xaf\x62\x4e\xa1\x6d\xc1\xff\x4a\xea\x5a\x2a\x82\xae\xf3\x4e\x39\x97\x16\x52\x43\xc8\x64\x81\x73\x82\x0c\x19\x13\xb4\x04\x52\x41\x4a\x55\xee\xc3\x6a\x03\x3b\x5d\x83\xa9\x15\x3c\xa8\xef\x72\x72\x3b\x32\x04\xd2\x02\x2a\xef\x94\xee\xa5\x65\xa9\xb6\x83\xf9\xc3\x83\xe3\x4e\x16\x05\xe4\xd8\x10\x20\x24\x98\x01\xcb\x92\x7c\x0f\x2b\xf9\x93\x8c\x95\x5a\x09\x48\x90\xd3\x7c\xda\x9c\x79\xb7\x52\x65\x02\xbe\xe9\xc4\x2b\x89\xd1\x61\x84\x07\xa0\xb0\x24\x01\x09\x9b\x2c\x99\xec\xcf\x98\x25\x87\xb2\xad\x30\x25\x01\x6d\xeb\x47\x68\xb6\xc4\xeb\xbe\xd6\x75\x9e\xad\x28\x75\x76\xa6\xb2\x2a\x90\xc9\xed\x01\x8e\xc1\x6e\xbd\x00\x07\xe8\xed\x6e\x19\xb2\x8c\x86\x43\x5d\xc8\x74\x27\x60\x4d\x0d\x99\x43\x2b\xd5\x8a\x51\x2a\x32\xb6\x17\x4f\x5e\x66\xba\x25\x4b\xdc\xf6\xdd\x69\xdb\xfa\xe1\xe6\xbe\xeb\xb2\x44\x0c\x77\x38\x8c\xa5\xeb\xc6\x96\xb0\x2e\x8a\xfe\x00\x6d\xeb\xcf\x87\x5c\x7f\x35\x6e\x1f\x19\xd1\x6c\xad\x80\xdf\x70\x52\xe2\x2d\x65\xc9\x09\xfc\x19\x5a\xa4\x1a\x31\xfc\xf8\x77\xe8\x65\x34\x5f\xc4\xcb\xf5\x22\x0c\x56\xeb\x28\x9e\x1d\x29\x00\x1a\x2c\x6a\x12\x90\x33\x57\x62\x3a\x25\x4e\xb3\xc9\x6c\x36\x9b\xf9\x6e\x27\xce\x3f\x7e\xfa\xfc\x2a\xef\xec\x0d\xbc\xb3\x77\xf0\xce\xdf\xc0\x3b\xff\x2f\x6f\xbe\x0c\xaf\xe2\xab\x20\x8a\xc3\x20\xb8\x7e\x8e\xd6\xb6\xfe\x0f\xc9\xb4\x52\x1b\xed\xcf\xdd\x43\xb8\x8c\xcc\xe2\xf2\x4a\x73\xa8\x75\x71\x34\xea\x47\xc8\xc5\x45\x74\xf1\x4e\xe6\x02\x19\x5f\x84\xde\xfc\x8a\xc3\x60\x11\xaf\x2f\x6e\x96\x4f\x89\x5f\x8c\x2e\xc5\xa8\x0c\xb0\x91\x54\x64\xdf\x69\xf3\xb8\x7e\xe8\x84\xc8\xb9\x18\x1e\x83\xef\x42\x06\x61\xa3\x8b\xba\xa4\x1b\x5d\x2b\xb6\xcf\xfd\x47\xdc\xf7\x60\x72\x4b\x3b\x23\xd5\x76\x44\x2f\x9d\x65\x4f\x76\xe3\x9f\x3a\xe1\x74\xa4\x30\x84\x59\xa0\x8a\x9d\x00\x36\x75\x9f\xb8\xcf\x3b\x8a\x7a\x25\xc8\x52\x6a\x88\xc7\x17\xdb\xd7\xd6\x4f\x6d\x7f\x03\x00\x00\xff\xff\x6e\x4b\x92\x2d\xec\x04\x00\x00")

func createdbJobYamlBytes() ([]byte, error) {
	return bindataRead(
		_createdbJobYaml,
		"createdb.job.yaml",
	)
}

func createdbJobYaml() (*asset, error) {
	bytes, err := createdbJobYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "createdb.job.yaml", size: 1260, mode: os.FileMode(436), modTime: time.Unix(1500240824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdOperatorDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x4f\x4f\x02\x31\x10\xc5\xef\xfd\x14\x93\x78\x66\x71\x13\x4f\xbd\x11\x41\x2f\x82\x44\x8d\x89\x27\x32\x74\x1f\xd8\xd8\x7f\xb6\x65\x23\xd9\xec\x77\x37\x4b\xd8\x15\x12\xf1\xe4\x9c\xa6\xbf\xce\x7b\x6f\xd2\x5e\x51\xd3\x50\x71\x0f\xf7\xa0\x1d\xa8\x6d\x05\x07\xfd\x8a\x98\xb4\x77\x92\xf0\x95\xe1\xba\x36\x8d\xeb\x72\x8d\xcc\xa5\xf8\xd0\xae\x92\x34\x45\x30\x7e\x6f\xe1\xb2\xb0\xc8\x5c\x71\x66\x29\x88\x1c\x5b\x48\x42\x56\xd5\xc8\x07\x44\xce\x3e\x1e\x69\x0a\xac\x20\xa9\x69\x8a\x17\x8e\x5b\xe4\x45\xcf\xda\x56\xa4\x00\xd5\xa9\x23\x82\xd1\x8a\x93\xa4\x52\x10\x65\xd8\x60\x38\xa3\xbb\x21\x3a\x4d\xe9\xca\xf0\x1a\x26\xf5\xa7\x4b\xc9\x44\xbd\xf7\xa1\x47\xac\xb5\xc2\x44\x29\xbf\x73\x87\x0d\x7e\x53\x10\x29\xef\x32\x6b\x87\x38\xf8\x8f\x2e\xfa\x77\xa5\x2d\x6f\x21\xe9\x73\xc7\xfb\x42\xfb\xb1\xf2\x11\x3e\x8d\xcf\x66\x65\x7d\x5d\xdc\x14\xe5\x20\x81\xab\x7f\x76\xef\xdd\xe7\x6f\xab\xe5\xe3\x74\xb5\x98\xcc\x67\xcf\xcb\xc9\xed\x6c\x18\x20\xaa\xd9\xec\x70\x17\xbd\x95\x27\x90\x68\xa3\x61\xaa\x27\x6c\xce\xe9\x91\x2f\x39\xbf\xcb\xe1\xe1\x8a\xe1\x17\xfe\xca\xfd\xff\x48\xf1\x1d\x00\x00\xff\xff\x79\x4d\xf1\x0a\x61\x02\x00\x00")

func etcdOperatorDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdOperatorDeploymentYaml,
		"etcd-operator.deployment.yaml",
	)
}

func etcdOperatorDeploymentYaml() (*asset, error) {
	bytes, err := etcdOperatorDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd-operator.deployment.yaml", size: 609, mode: os.FileMode(436), modTime: time.Unix(1500241022, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdClusterYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x3d\x6b\xc3\x30\x10\x86\x77\xfd\x8a\x43\xdd\x55\xa5\x5e\x8a\xc6\x74\x28\x86\xb6\x14\x12\xb2\x5f\xe4\x23\x88\x58\x1f\x48\x67\xd1\xc6\xf8\xbf\x17\xd9\x49\xb7\xbb\x97\xe7\xfd\x78\x82\x79\x06\xf5\x4e\xe1\xc3\x05\x82\x65\x11\x98\xdc\x89\x72\x71\x31\x18\x90\xc4\x76\x50\x36\x66\x8a\x45\xd9\xe8\x9f\xeb\xee\x4c\x8c\x3b\x29\xae\x2e\x0c\x06\xe4\xdb\x38\x15\xa6\x2c\x85\x27\xc6\x01\x19\x8d\x00\x08\xe8\xe9\xee\x95\xf7\xb7\x24\xb4\x64\x60\x9e\xd5\x11\xf3\x85\xf8\xeb\xa1\x2d\x8b\x28\x89\x6c\xb3\x15\x77\x23\x03\x9d\x00\xa8\xff\xfd\x9d\xda\xa9\xd7\x16\x72\x46\x7b\x9d\x52\xc3\x1e\x77\x1f\x98\x72\xc5\xb1\x0f\x07\xb2\xb1\xad\x79\xd1\x5a\xaf\x80\xc7\x9f\xfd\xca\x14\x03\xdd\x26\x15\x8e\x19\x2f\x74\xfc\x4d\x6d\xda\x77\x2b\x28\x4c\x81\x4f\x71\x9c\x3c\xc9\x95\x49\x75\xcb\x07\xa8\xab\x7a\x70\x37\xea\xc3\xe7\x7e\x4b\xd6\x5a\xfc\x05\x00\x00\xff\xff\x34\x19\x15\xbe\x2c\x01\x00\x00")

func etcdClusterYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdClusterYaml,
		"etcd.cluster.yaml",
	)
}

func etcdClusterYaml() (*asset, error) {
	bytes, err := etcdClusterYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd.cluster.yaml", size: 300, mode: os.FileMode(436), modTime: time.Unix(1500241019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdClusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\x05\xe1\xb7\x3d\xc0\x2e\xb2\x15\x5e\x3b\x64\xe9\xd4\xa1\x3b\x23\x11\x0d\x11\x4b\x14\x48\xca\x68\x1a\xe4\xdf\x0b\xd7\x46\x97\x04\x68\x46\x89\x07\xe7\xea\x8a\xff\xe0\x72\x81\x61\x4f\xe5\x95\x0b\xc1\xf5\x1a\xb0\xf2\x3b\xa9\xb1\x94\x11\xf4\x80\x71\xc0\xe6\x47\x51\xfe\x42\x67\x29\xc3\xe9\xd9\x06\x96\xa7\x79\x77\x20\xc7\x5d\x38\x71\x49\x23\xbc\x4c\xcd\x9c\xf4\x4d\x26\x0a\x99\x1c\x13\x3a\x8e\x01\xa0\x60\xa6\x11\xc8\x63\xea\xa5\x92\xa2\x8b\x06\x6d\x13\xd9\x18\x7a\xc0\xca\x7b\x95\x56\x6d\x21\xfb\x1f\x6a\x88\xa2\x24\x36\x44\xc9\x01\x40\xc9\xa4\x69\xa4\x0d\x88\x6b\x88\x05\x80\x99\xf4\xb0\xdd\x76\xff\xbb\x3b\xae\x4f\xa7\xb2\x54\xb0\x5b\x8d\x1f\x59\x53\x45\xf5\xf3\xef\xe0\x01\xa3\xb9\x28\x7e\xd0\x56\xff\xd6\xba\xcd\xe3\x84\x66\x0f\x09\xbb\xee\x56\x52\x25\xd9\x6a\x23\x9d\x79\x7d\x58\x0f\x54\x52\x15\x2e\xbe\x9e\xea\xb2\x1b\x73\x2a\x3e\xcb\xd4\xf2\x92\xc8\x79\x03\x67\x5a\xa9\xbf\xb2\xb1\xd6\x3b\x1f\x93\xa8\x4e\x72\xce\xf7\x1d\xdf\x01\x00\x00\xff\xff\xca\xa7\x46\xbb\x27\x02\x00\x00")

func etcdClusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdClusterroleYaml,
		"etcd.clusterrole.yaml",
	)
}

func etcdClusterroleYaml() (*asset, error) {
	bytes, err := etcdClusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd.clusterrole.yaml", size: 551, mode: os.FileMode(436), modTime: time.Unix(1500241016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdClusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xbd\x4e\x03\x31\x10\xc4\xf1\xde\x4f\xb1\x12\x75\x8c\xd2\x21\x77\x40\x91\x06\x51\x04\x44\xbf\xe7\x1b\xc2\x92\x3b\xaf\xb5\x5e\xa7\xe0\x74\xef\x8e\xf8\xe8\x08\x69\x47\xfa\x6b\x7e\x57\xb4\x2c\x14\x77\x28\x0f\x52\x40\xeb\x1a\xb8\xca\x0b\xac\x89\x96\x44\x36\x70\x8e\xdc\xfd\x4d\x4d\x3e\xd8\x45\x4b\x3c\xde\xb4\x28\x7a\x7d\xda\x0e\x70\xde\x86\xa3\x94\x31\xd1\xfd\xd4\x9b\xc3\xf6\x3a\xe1\x4e\xca\x28\xe5\x10\x66\x38\x8f\xec\x9c\x02\x51\xe1\x19\x89\xe0\x79\xdc\x68\x85\xb1\xab\xa5\x65\x89\xcf\x6c\x07\xf8\x23\xcf\x68\x95\x33\xd6\x35\x98\x4e\xd8\xe3\xf5\xab\xe1\x2a\x3b\xd3\x5e\x2f\x20\x02\xd1\x9f\xfb\xf3\x6f\xa1\xf5\xe1\x1d\xd9\x5b\x0a\x9b\xdf\xe6\x09\x76\x92\x8c\xdb\x9c\xb5\x17\xff\x27\xfb\x59\xbf\x75\x89\xe8\x2c\xf9\x33\x00\x00\xff\xff\xad\xde\x16\x58\x40\x01\x00\x00")

func etcdClusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdClusterrolebindingYaml,
		"etcd.clusterrolebinding.yaml",
	)
}

func etcdClusterrolebindingYaml() (*asset, error) {
	bytes, err := etcdClusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd.clusterrolebinding.yaml", size: 320, mode: os.FileMode(436), modTime: time.Unix(1500242083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc8\xb1\x0a\x02\x31\x0c\x06\xe0\xbd\x4f\x11\x70\xf6\xc0\x35\x9b\x93\x8b\xb8\x28\xee\x21\xfd\x91\x20\x97\x96\x5c\xbc\xa5\xf4\xdd\x5d\x74\xfd\x0e\x34\x06\x2d\x17\xf8\xd5\x1c\x34\x67\x91\x6e\x4f\xc4\x66\xcd\x99\xf6\x53\x79\x9b\x57\xa6\x3b\x62\x37\xc5\x59\xb5\x7d\x3c\xcb\x8a\x94\x2a\x29\x5c\x88\x5c\x56\x30\x21\xb5\x1e\x5b\x47\x48\xb6\xf8\xe9\xd6\x45\xc1\x34\xc6\xf2\x90\x78\x21\x6f\x7f\x9b\xb3\x7c\x03\x00\x00\xff\xff\x94\xdf\xda\xee\x77\x00\x00\x00")

func etcdServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdServiceaccountYaml,
		"etcd.serviceaccount.yaml",
	)
}

func etcdServiceaccountYaml() (*asset, error) {
	bytes, err := etcdServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd.serviceaccount.yaml", size: 119, mode: os.FileMode(436), modTime: time.Unix(1500241006, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ingesterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x6f\x9b\x40\x10\x85\xef\xfc\x8a\x91\x7a\x36\xd4\x6d\xa4\xaa\x7b\x8c\x8d\x2a\x4b\xa9\x8d\x6c\x2b\xd7\x68\x80\x09\x5e\x65\x99\x5d\xed\x0e\x56\x2c\xc4\x7f\xaf\x48\x63\x0c\x35\x52\xf7\x04\x33\xf3\xbe\x37\x6f\xbe\x40\xdb\x42\xfc\x8b\xf8\x49\x33\x41\xd7\x45\xe8\xf4\x33\xf9\xa0\x2d\x2b\xa0\x77\x21\xee\x3f\x43\x72\x5e\xe6\x24\xb8\x8c\xde\x34\x97\x0a\xd6\xe4\x8c\xbd\xd4\xc4\x12\xd5\x24\x58\xa2\xa0\x8a\x00\x18\x6b\x52\xa0\xb9\xa2\x20\xe4\x17\x8d\xab\x9b\xcf\x6a\x70\x58\x90\x82\xb6\x8d\x8f\xe8\x2b\x92\xed\xb5\xd6\x75\x51\x70\x54\xf4\x6a\x4f\xce\xe8\x02\x83\x82\x65\x04\x20\x54\x3b\x83\x42\x7d\x07\x60\xec\xd2\x3f\x83\x39\x99\x70\xfd\x03\x40\xe7\xee\x8d\x01\xae\xe8\xfe\x15\x96\x05\x35\x93\x1f\x64\x8b\x7f\x16\x1e\x68\xba\xc6\x8a\x14\xe4\xe2\xcb\x3c\x69\xdb\x38\x7b\x7d\xef\xba\xeb\x94\x1a\x42\x7c\xde\xa9\xeb\xa6\xc2\xac\x31\x26\xb3\x46\x17\x97\x8f\xc0\xab\xc1\x37\xde\x4c\xdb\x23\x21\xf1\xf9\x16\xe6\xb6\x59\x7a\x5c\xad\x5f\xd2\xed\x3a\xdb\x6d\xb6\xc7\x51\x1f\xe0\x8c\xa6\x21\x05\x27\x11\xa7\x92\x84\xa4\x28\xd5\xb7\xef\x3f\x7e\xce\x30\xf6\xe9\x2a\xdd\x3c\xa7\xfb\x97\x6c\xb7\x7b\x9a\x63\xb4\x6d\x7c\xd0\x42\x1b\x7e\xb5\xf1\x8a\xdc\x29\x3e\x08\x56\x9a\xab\xcc\x5a\x33\x5a\xf1\x46\x7c\x3c\xee\xd7\x8f\xc3\x5a\x87\x39\xe6\xc7\xe9\x16\xb9\xb5\x12\xc4\xa3\x53\x0f\x0f\xcb\xaf\xc3\xdc\xd9\x9a\xa6\xa6\xdf\xb6\x61\x09\x73\xa9\x0b\x72\xa7\xc5\x1b\x5d\xbc\xe6\x6a\x02\xaf\x7b\x49\x86\x72\x52\xd0\x47\x4e\xfa\xc1\x64\x32\xe1\x09\xcb\x1d\x9b\x8b\x02\xf1\x0d\x45\x63\xbf\x91\xd5\x7f\x8c\x02\x15\x9e\x44\x4d\xc0\x7f\x6b\xdb\x7b\xd9\x9f\x00\x00\x00\xff\xff\xce\x84\x7c\x30\x41\x03\x00\x00")

func ingesterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_ingesterDeploymentYaml,
		"ingester.deployment.yaml",
	)
}

func ingesterDeploymentYaml() (*asset, error) {
	bytes, err := ingesterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ingester.deployment.yaml", size: 833, mode: os.FileMode(436), modTime: time.Unix(1500238421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mrplotterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\x4d\x8f\xda\x30\x10\xbd\xe7\x57\x8c\xe8\x39\x81\xb0\x6c\x3f\x7c\x5c\x40\x15\x52\x4b\xa3\x82\x7a\xad\x8c\x99\xa5\x56\x1d\xdb\xb5\x07\xb4\xc8\xf2\x7f\xaf\x92\xdd\x84\xb8\x0a\xa7\xfa\x94\xbc\x99\xf7\x3c\x6f\x3c\xf3\x0e\x42\x80\xe2\x33\xea\x2f\x52\x23\xc4\x98\x71\x2b\x7f\xa0\xf3\xd2\x68\x06\xf8\x42\xa8\x9b\x4f\x3f\xbd\x94\x07\x24\x5e\x66\xbf\xa5\x3e\x32\x58\xa1\x55\xe6\x5a\xa3\xa6\xac\x46\xe2\x47\x4e\x9c\x65\x00\x9a\xd7\xc8\xa0\x76\x56\x19\x22\x74\x6f\x88\xb7\x5c\x20\x83\x10\x8a\x3d\x77\x27\xa4\x6d\x87\xc5\x98\x79\x8b\xa2\x61\x3a\xb4\x4a\x0a\xee\x19\x94\x19\x00\x61\x6d\x15\x27\x6c\x22\x00\xc3\x1b\x9a\xa3\xf8\x01\x95\xef\xfe\x00\xb8\xb5\xe9\xa5\x00\x9d\x6c\x73\x84\xd1\xc4\xa5\x46\xd7\x53\xf2\x91\x42\x5f\x8f\xac\xf9\x09\x19\x1c\xc8\x1d\x0f\xd3\x10\x8a\xea\xf9\x25\xc6\x3e\x8d\xf5\x16\xde\x3a\x14\x63\xca\xac\xce\x4a\x55\x46\x49\x71\x6d\xed\x2e\xfb\x9b\x8b\x4d\x1a\x1e\x10\x1d\x7a\x73\x76\x02\x07\x86\x1a\xf0\xcf\x19\x3d\x25\x58\xd3\x88\xda\xb8\x2b\x83\xc9\xfc\xf1\xfd\x57\x39\x49\x62\xc2\x9e\x19\x4c\xca\xd9\x6c\x56\x0f\x03\x4a\xd6\xf2\xae\xcc\x63\x39\x1f\x97\x99\xa7\x32\xa8\x2f\x43\x85\xae\x7d\xeb\xfd\x72\xf5\x73\xbd\x5d\x55\xdf\x36\xdb\x7d\xa2\x72\xe1\xea\x8c\x0c\x7e\x11\x59\x36\x9d\x22\x89\x23\x9b\x3f\x7c\xf8\x34\xa2\xf1\xb4\xff\xbe\x7a\xea\x45\x76\x63\x2a\xed\x63\xe4\x07\x63\xc8\x93\xe3\x96\x2d\x16\xe5\xac\xcf\xb3\xc6\x0d\xed\xe5\xb7\xd7\xae\x8c\x23\x06\x8b\xc5\xc3\x40\xd3\x3a\x43\x46\x18\xc5\x60\xbf\xac\xee\x93\x3e\xce\xee\x72\xf2\x3c\x4f\x36\xe4\xd2\x6d\xc4\x0e\xdd\x45\x0a\xfc\xcf\x75\x48\x87\xfb\x9f\xc1\xee\x86\xba\xf7\x9c\xb7\x9f\x7d\xbd\xd4\xca\x25\x16\x5e\x2b\x68\xde\x61\x90\xde\xf5\x64\x98\xdf\x61\x37\x82\xcf\xa0\xdd\x7f\xa7\xb9\xda\x54\x9e\x85\xe0\xb8\x3e\x21\x14\x3b\x49\xb8\xd1\xcf\xa6\x58\xdf\xa2\x6d\xe9\x79\xe3\x29\xc6\x10\x50\x1f\x5b\xc0\xa3\x42\x41\xc6\x8d\xba\xf9\x1b\x00\x00\xff\xff\xce\xaa\x2f\xf1\x79\x04\x00\x00")

func mrplotterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_mrplotterDeploymentYaml,
		"mrplotter.deployment.yaml",
	)
}

func mrplotterDeploymentYaml() (*asset, error) {
	bytes, err := mrplotterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mrplotter.deployment.yaml", size: 1145, mode: os.FileMode(436), modTime: time.Unix(1500238430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pmu2btrdbDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xc1\x8e\x9b\x30\x10\xbd\xf3\x15\xa3\xed\x19\xd2\x6c\x23\x75\xeb\xe3\x26\xa8\x42\xaa\xb2\x28\x41\x7b\x5d\x19\x33\x9b\x5a\x35\xb6\x65\x26\x68\x23\xcb\xff\x5e\xc1\x06\x02\x11\x3d\x75\x4e\x66\xc6\x6f\xe6\x3d\xcf\xe3\x0b\x78\x0f\xc9\x4f\xd4\xbf\xa4\x46\x08\x21\xe2\x56\xbe\xa2\x6b\xa4\xd1\x0c\xf0\x83\x50\x77\xc7\x66\xd5\xae\x4b\x24\xbe\x8e\xfe\x48\x5d\x31\xd8\xa1\x55\xe6\x52\xa3\xa6\xa8\x46\xe2\x15\x27\xce\x22\x00\xcd\x6b\x64\x60\xeb\xf3\x63\x49\xae\x2a\xaf\x99\xc6\x72\x81\x0c\xbc\x4f\x0a\xee\x4e\x48\xfb\x21\x17\x42\xd4\x58\x14\x1d\xd2\xa1\x55\x52\xf0\x86\xc1\x26\x02\x20\xac\xad\xe2\x84\x5d\x05\x60\x3a\xa1\x0b\xc5\x4b\x54\xcd\xf0\x05\xc0\xad\x9d\x0f\x05\x18\xda\x76\x21\x8c\x26\x2e\x35\xba\x11\x12\x2f\x10\xfd\x0c\x59\xf3\x13\x32\xe8\x93\x2b\xef\x93\xfc\xfd\x23\x84\xf1\x1a\x1b\x25\x5c\x5f\x28\x84\x39\x32\x3f\x2b\x95\x1b\x25\xc5\xa5\x97\xbb\x1d\x27\x27\xd9\xbc\x3c\x01\xa2\x6e\x6f\x52\x6e\xdc\xd2\x62\xbb\x7b\x4b\xf7\xbb\xfc\x25\xdb\x17\x93\x3a\x40\xcb\xd5\x19\x19\xfc\x26\xb2\x6c\xb5\x42\x12\x15\x7b\xfc\xf6\xfd\xc7\x42\x8f\x43\xba\x4d\xb3\xd7\xf4\xf0\x96\xbf\x1c\x16\x7b\x3c\xac\x9f\x9e\x36\x0f\x0b\xc8\xe7\xe2\xb0\x7b\x1e\xc7\x1f\x97\xb0\xfd\x8b\xc4\xa5\x31\xd4\x90\xe3\x96\x6d\x36\xeb\xaf\xe3\x3d\x6b\x1c\x4d\x36\x14\xdf\x96\x90\x1b\x47\x0c\xba\xb9\x93\xa6\xd6\x19\x32\xc2\x28\x06\xc5\x36\x9f\xe4\xef\xd6\x14\xab\x93\xb8\x44\x71\x1c\xcf\x4c\xda\x0e\xa6\x3c\xa2\x6b\xa5\xc0\xff\x74\xe4\xdc\x5f\x77\xde\x1a\x7c\x35\xea\x8b\xfb\xe3\x44\x10\xf5\x0d\x3f\x55\xde\x11\xff\xa7\x22\xe8\x7f\x34\xa7\xb9\xca\xf2\x86\x79\xef\xb8\x3e\x21\x24\x47\x49\x98\xe9\x77\x93\xa4\xb7\x6a\x4f\x30\xee\x98\x87\xe0\x3d\xea\xaa\x4f\x34\xa8\x50\x90\x71\x8b\x9c\xff\x06\x00\x00\xff\xff\x4e\x48\x2b\xc4\xe2\x03\x00\x00")

func pmu2btrdbDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_pmu2btrdbDeploymentYaml,
		"pmu2btrdb.deployment.yaml",
	)
}

func pmu2btrdbDeploymentYaml() (*asset, error) {
	bytes, err := pmu2btrdbDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pmu2btrdb.deployment.yaml", size: 994, mode: os.FileMode(436), modTime: time.Unix(1500238440, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x08\xce\x4d\x2c\x2a\x51\x70\x2f\xca\x4c\x51\x08\x2e\xc9\x2f\x4a\x55\x28\x4a\x4d\x4c\xc9\x4d\xe5\xe2\x2a\xc9\x2f\xc9\xe7\x02\x04\x00\x00\xff\xff\x83\x57\x52\x7f\x20\x00\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"readme.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme.md", size: 32, mode: os.FileMode(436), modTime: time.Unix(1500239985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _receiverDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4f\x6f\xa3\x3e\x10\xbd\xf3\x29\x46\xf9\x9d\x21\x7f\xfa\x5b\x6d\xd7\xb7\x55\x8a\xaa\x48\x6d\x82\xd2\xa8\xd7\xca\x31\x53\x62\xd5\xd8\x5e\x63\x50\x91\xc5\x77\x5f\x39\x2d\x04\xb7\xb4\xa7\xf5\xc9\xcc\xf8\xbd\x99\x79\x36\xef\x3f\x70\x0e\x92\x5b\x94\x77\x5c\x22\x74\x5d\x44\x35\x7f\x44\x53\x71\x25\x09\xe0\xab\x45\xe9\xb7\xd5\xbc\x59\x1e\xd1\xd2\x65\xf4\xc2\x65\x4e\xe0\x06\xb5\x50\x6d\x89\xd2\x46\x25\x5a\x9a\x53\x4b\x49\x04\x20\x69\x89\x04\x0c\x32\xe4\x0d\x9a\xb8\xd6\x65\xfd\x1e\xad\x34\x65\x48\xc0\xb9\xe4\x40\x4d\x81\x76\xdb\xc7\xba\x2e\xaa\x34\x32\x8f\x36\xa8\x05\x67\xb4\x22\xb0\x8a\x00\x2c\x96\x5a\x50\x8b\x3e\x03\x30\xae\xe2\x97\xa0\x47\x14\x55\xff\x05\x40\xb5\xfe\x5c\x18\xa0\xa7\xf6\x8b\x29\x69\x29\x97\x68\x06\x58\xfc\xa1\xe1\x81\x8d\x97\xb4\x40\x02\x47\x6b\xf2\xe3\xdc\xb9\x24\x7b\x7e\xed\xba\xfe\x14\x19\x86\x78\xd7\xa9\xeb\x42\x60\x56\x0b\x91\x29\xc1\x59\x7b\x1e\x78\x3d\xd4\x4d\x36\x61\x7a\x04\x34\x58\xa9\xda\x30\x1c\x8d\xe4\x83\x7f\x6a\xac\x6c\x10\xf3\x52\x94\xca\xb4\x04\x66\x3f\x96\xab\x7b\x3e\x0b\x72\x4c\xd7\x04\x66\xcb\xc5\x62\x51\x8e\x13\x82\x97\xfc\x4b\x9a\xe5\x62\xf5\xff\x34\xcf\x2a\xe4\x41\xd9\x8c\x29\x7a\xf5\xd2\xc3\xfa\xe6\x29\xdd\xde\x64\xbb\xcd\xf6\x10\xb0\x34\x54\xd4\x48\xe0\x64\xad\x26\xf3\x39\x5a\x96\x93\xd5\xd5\xcf\x5f\x13\x1c\xfb\x74\x9d\x6e\x1e\xd3\xfd\x53\xb6\xdb\x4f\x72\xcc\x96\xd7\xd7\x57\xb3\xef\x91\xbb\xbb\x29\xa4\x73\xc9\x03\xb7\xb8\x91\xcf\x2a\x59\xa3\x3e\x25\x0f\x96\x16\x5c\x16\x99\x52\x62\x74\x01\x13\x8c\xb7\xe9\x36\xdd\xff\x3e\x6c\x76\xdb\xe9\x8e\x16\x97\x7e\x1a\x25\xea\x12\xef\x55\x2d\x43\x99\x7b\x4e\x86\xfa\x14\xbf\x60\x6b\xb8\x2c\xc2\x5b\xf0\x90\x8c\xda\x13\x01\x2f\xd0\xdc\x1f\x9c\x07\x27\x0c\xd2\x7c\x27\x45\x4b\xc0\x9a\x1a\x87\x94\x56\x66\x5c\x2a\xbe\x3c\xef\x4c\x19\x4b\xc0\xeb\x35\xe2\xd1\x46\x59\xc5\x94\x20\x70\x58\x67\xa3\xf8\x87\x3f\x56\x60\x41\x59\x1b\x8d\x87\x0a\x8a\x7c\x3b\x4d\x85\xcc\xa0\x0d\x5f\xd9\x5b\x6c\xfb\x19\x16\xc7\x71\x60\x35\x4d\x6f\x2d\x0f\x68\x1a\xce\xf0\x1f\xf8\x4a\xe8\x12\x13\x0e\xd1\xbb\xc3\xa0\x65\x7c\xde\x8e\xc4\xb3\x67\xd2\x37\x45\xa7\x44\xfa\x4a\x3e\x6f\x9c\x46\x52\xb1\xc9\x2a\xe2\x9c\xa1\xb2\x40\xb8\x3c\xc3\xf4\x92\x3d\xb7\x19\xfb\xfe\xbb\xce\x39\x94\xf9\x39\x50\xa1\x40\x66\x95\xf9\xb2\xf3\xbf\x01\x00\x00\xff\xff\xd5\x7c\x86\xa7\xb6\x05\x00\x00")

func receiverDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_receiverDeploymentYaml,
		"receiver.deployment.yaml",
	)
}

func receiverDeploymentYaml() (*asset, error) {
	bytes, err := receiverDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "receiver.deployment.yaml", size: 1462, mode: os.FileMode(436), modTime: time.Unix(1500238446, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _secret_ceph_keyringSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x3f\x6f\xab\x30\x14\xc5\x77\x7f\x8a\x13\x12\x89\xf7\x06\x83\xde\x1b\x23\x31\x75\xe8\x52\x75\xea\x16\x65\x30\xf6\x05\x2c\x88\x8d\xec\x8b\x14\x44\xf8\xee\x55\xfe\xa9\x6a\x9b\xb4\x55\x97\x3b\x9d\x7b\xfe\xfc\x96\x8b\xbc\xb4\x2e\x2f\x55\x6c\xc4\x12\xd3\x84\xec\x91\xdc\x93\x75\x84\x79\x16\x4b\x70\x63\x23\x74\x20\xc5\x14\xc1\x0d\x41\x53\xdf\x40\x7b\x57\xd9\x1a\x91\x74\x20\x16\x91\x18\x92\xf6\xc2\x56\xd8\x60\x01\x49\xc8\x89\x75\x7e\x54\x9e\x4e\x76\x94\x63\x2b\xb8\x21\x27\x00\x80\x74\xe3\x91\x3c\xf8\xa1\x33\x70\x9e\xd1\x79\xad\xf8\xe6\x57\x72\xd6\xef\x2d\xe3\x9f\xa8\xec\x17\x11\x9d\x25\xc7\x99\x32\x3b\xeb\xb2\x96\xc6\x60\x5d\xfd\x8b\xc8\x1b\x2e\x1f\x2b\xf4\x43\x6c\xcc\xdb\xa3\x68\x87\x92\x34\x77\x17\x48\x17\x26\x90\x0e\xd3\x94\xbd\xa8\x50\x13\x3f\xab\x1d\xc5\x5e\x69\x9a\x67\xd4\xe4\x28\x58\x7d\xc2\x28\xaf\x3d\xa5\xac\x82\xdf\xc9\xca\x76\x54\xdc\x5f\xf3\x59\xe5\x5d\x25\x7a\xdf\x1b\x21\xce\xa9\xc5\xea\x8f\x56\xfc\x23\x34\x38\xa0\x0e\xd4\x23\x69\x69\x4c\x70\x80\x1e\x18\xd2\xa4\x45\x0a\x59\xfd\xc7\x01\x1c\x20\x0d\xd2\xcd\xfa\x54\x7c\xbd\x4d\xff\xde\x19\xfa\x6e\x50\x28\x8d\xfc\x06\x80\x94\x3c\xf6\x54\x24\x47\xb7\xe0\x88\x29\x66\xd6\xe7\xa1\x34\xc9\x75\x60\x67\x99\x82\xea\x8a\x96\xc6\x62\x35\x9d\xed\x66\xf1\x1a\x00\x00\xff\xff\xb0\x7e\xf0\xc6\xa8\x02\x00\x00")

func secret_ceph_keyringShBytes() ([]byte, error) {
	return bindataRead(
		_secret_ceph_keyringSh,
		"secret_ceph_keyring.sh",
	)
}

func secret_ceph_keyringSh() (*asset, error) {
	bytes, err := secret_ceph_keyringShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "secret_ceph_keyring.sh", size: 680, mode: os.FileMode(436), modTime: time.Unix(1500249075, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"adminconsole.deployment.yaml": adminconsoleDeploymentYaml,
	"btrdb.statefulset.yaml": btrdbStatefulsetYaml,
	"c37ingress.deployment.yaml": c37ingressDeploymentYaml,
	"create_admin_key.sh": create_admin_keySh,
	"createdb.job.yaml": createdbJobYaml,
	"etcd-operator.deployment.yaml": etcdOperatorDeploymentYaml,
	"etcd.cluster.yaml": etcdClusterYaml,
	"etcd.clusterrole.yaml": etcdClusterroleYaml,
	"etcd.clusterrolebinding.yaml": etcdClusterrolebindingYaml,
	"etcd.serviceaccount.yaml": etcdServiceaccountYaml,
	"ingester.deployment.yaml": ingesterDeploymentYaml,
	"mrplotter.deployment.yaml": mrplotterDeploymentYaml,
	"pmu2btrdb.deployment.yaml": pmu2btrdbDeploymentYaml,
	"readme.md": readmeMd,
	"receiver.deployment.yaml": receiverDeploymentYaml,
	"secret_ceph_keyring.sh": secret_ceph_keyringSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"adminconsole.deployment.yaml": &bintree{adminconsoleDeploymentYaml, map[string]*bintree{}},
	"btrdb.statefulset.yaml": &bintree{btrdbStatefulsetYaml, map[string]*bintree{}},
	"c37ingress.deployment.yaml": &bintree{c37ingressDeploymentYaml, map[string]*bintree{}},
	"create_admin_key.sh": &bintree{create_admin_keySh, map[string]*bintree{}},
	"createdb.job.yaml": &bintree{createdbJobYaml, map[string]*bintree{}},
	"etcd-operator.deployment.yaml": &bintree{etcdOperatorDeploymentYaml, map[string]*bintree{}},
	"etcd.cluster.yaml": &bintree{etcdClusterYaml, map[string]*bintree{}},
	"etcd.clusterrole.yaml": &bintree{etcdClusterroleYaml, map[string]*bintree{}},
	"etcd.clusterrolebinding.yaml": &bintree{etcdClusterrolebindingYaml, map[string]*bintree{}},
	"etcd.serviceaccount.yaml": &bintree{etcdServiceaccountYaml, map[string]*bintree{}},
	"ingester.deployment.yaml": &bintree{ingesterDeploymentYaml, map[string]*bintree{}},
	"mrplotter.deployment.yaml": &bintree{mrplotterDeploymentYaml, map[string]*bintree{}},
	"pmu2btrdb.deployment.yaml": &bintree{pmu2btrdbDeploymentYaml, map[string]*bintree{}},
	"readme.md": &bintree{readmeMd, map[string]*bintree{}},
	"receiver.deployment.yaml": &bintree{receiverDeploymentYaml, map[string]*bintree{}},
	"secret_ceph_keyring.sh": &bintree{secret_ceph_keyringSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

