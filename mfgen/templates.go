// Code generated by go-bindata.
// sources:
// ../manifest_templates/adminconsole.deployment.yaml
// ../manifest_templates/btrdb.statefulset.yaml
// ../manifest_templates/create_admin_key.sh
// ../manifest_templates/createdb.job.yaml
// ../manifest_templates/etcd.statefulset.yaml
// ../manifest_templates/ingester.deployment.yaml
// ../manifest_templates/mrplotter.deployment.yaml
// ../manifest_templates/pmu2btrdb.deployment.yaml
// ../manifest_templates/receiver.deployment.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _adminconsoleDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x8a\xdb\x30\x10\xbd\xfb\x2b\x06\x7a\xb6\xdd\xa4\x0b\xa5\x3a\x6e\x12\x4a\xa0\xcd\x9a\x26\xf4\x5a\x14\x79\x36\x11\x2b\x4b\x42\x9a\x98\x0d\xc2\xff\x5e\xe4\xdd\x38\x56\x70\x37\xd5\x49\x9e\x99\xf7\x66\xe6\xe1\xa7\x4f\x10\x02\x14\xdf\x51\xff\x90\x1a\xa1\xeb\x32\x6e\xe5\x6f\x74\x5e\x1a\xcd\x00\x5f\x09\x75\xbc\xfa\xb2\x9d\xed\x91\xf8\x2c\x7b\x91\xba\x66\xb0\x44\xab\xcc\xb9\x41\x4d\x59\x83\xc4\x6b\x4e\x9c\x65\x00\x9a\x37\xc8\x40\x18\xed\x8d\xc2\xcc\x5b\x14\x31\xea\xd0\x2a\x29\xb8\x67\x30\xcb\x00\x08\x1b\xab\x38\x61\xcc\x00\x8c\xd1\xf1\x28\xbe\x47\xe5\x2f\x5f\x00\xdc\xda\x2b\x61\x0c\x5c\x48\xe3\x11\x46\x13\x97\x1a\xdd\x00\xc8\x6f\x46\xb8\xd0\xc8\x86\x1f\x90\xc1\x9e\x5c\xbd\x2f\x43\x28\xaa\xe7\xd7\xae\x7b\x2f\x62\x21\x14\x3b\xee\x0e\x48\xef\x7b\x77\x5d\x8a\xab\x4e\x4a\x55\x46\x49\x71\x66\x10\x42\xb1\x18\xba\x16\xeb\x34\x3d\x02\xa2\x6e\xaf\x4b\x5c\xe7\x5a\xed\x16\xcb\x3f\xab\xcd\xb2\x7a\x5a\x6f\x76\xa3\x3c\x40\xcb\xd5\x09\x19\x1c\x89\x2c\x2b\x4b\x24\x51\xb3\xf9\x97\xaf\xdf\x26\x38\x1e\x77\xbf\x96\x8f\x03\xc9\x76\x8a\xa5\xdf\x33\xdf\x1b\x43\x9e\x1c\xb7\xec\xe1\x61\xf6\x79\xa8\x6b\x8d\x3a\x35\xf8\xd3\x9c\x34\xf9\xa9\x19\x05\xda\x63\xfe\x82\x67\x27\xf5\x21\x21\x6f\x22\xa4\xe2\x74\x64\x10\x07\x2c\x63\x61\x99\x54\x38\xe4\xf5\x93\x56\x67\x06\xe4\x4e\x38\xc1\xcd\xeb\x46\xea\xfc\x68\x3c\xc5\x0e\x1f\xb2\xf7\xa5\x1e\x5d\x8b\xee\xbf\x9a\x58\xe3\x6e\xf7\x19\xfe\x8f\xca\x38\x62\x30\x9f\xcf\xe7\x09\x93\x75\x86\x8c\x30\x8a\xc1\x6e\x51\x25\x99\xd1\xb4\x91\x37\x1b\x2b\x37\x6a\x72\x47\x32\x8f\xc2\x21\xb1\x84\xf9\x2d\xb6\xf9\x37\xec\xae\x54\xf7\x58\x6f\x80\x79\x9e\x27\x9e\x6e\x2f\x1e\xde\xa2\x6b\xa5\xc0\x0f\x0c\x9c\xda\x31\xb1\xe2\xc5\x86\x83\xea\x79\x7f\x1d\x89\x4c\xbd\xa5\xde\x94\x4f\x85\xbc\x6d\x12\x5f\x19\xa7\xb9\x5a\x57\x9e\x85\xe0\xb8\x3e\x20\x14\x5b\x49\xb8\xd6\xcf\xa6\x58\x5d\xb3\xbd\xbf\xf2\xe8\xc1\xae\x0b\x01\x75\xdd\x07\x3c\x2a\x14\x64\xdc\xc4\x94\x7f\x03\x00\x00\xff\xff\x29\xb2\x7f\xcb\xdd\x04\x00\x00")

func adminconsoleDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_adminconsoleDeploymentYaml,
		"adminconsole.deployment.yaml",
	)
}

func adminconsoleDeploymentYaml() (*asset, error) {
	bytes, err := adminconsoleDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "adminconsole.deployment.yaml", size: 1245, mode: os.FileMode(436), modTime: time.Unix(1488387869, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _btrdbStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x41\x6f\xea\x38\x10\xbe\xe7\x57\x8c\xe8\x99\x00\x6d\xa5\x55\x7d\x6b\x81\x6d\x91\x5a\x88\xb6\xd1\x4a\x7b\x42\xc6\x19\x88\x55\xc7\xf6\xda\x63\xfa\x50\xc4\x7f\x7f\x0a\x81\xbc\x84\x96\x1e\xde\xab\x4f\x30\xdf\xcc\xf7\xf9\x1b\x3b\x9e\x2b\x28\x4b\x88\x1f\x51\x3f\x4b\x8d\xb0\xdf\x47\xfd\x7e\x3f\xe2\x56\xfe\x8b\xce\x4b\xa3\x19\x6c\x47\xd1\x9b\xd4\x19\x83\x57\x74\x5b\x29\x30\x2a\x90\x78\xc6\x89\xb3\x08\x40\xf3\x02\x19\xac\xc8\x65\xab\x08\x40\xf1\x15\x2a\x5f\xc5\x01\xb8\xb5\x27\xc0\x5b\x14\x55\xd0\x1a\x47\x07\xb4\x7f\xf8\xc9\xe0\xf6\x76\x34\x3c\x24\xd7\x34\x1b\x67\x45\x0b\xbd\x1b\x0e\xdb\x68\x4e\x64\x23\x00\xa1\x82\x27\x74\xb3\x84\xc1\xdc\x68\x8c\x00\x3c\x2a\x14\x64\xdc\x07\xdd\x73\x27\xdc\x5a\x3f\xd8\x8e\x56\x48\xbc\xf1\x44\x9c\x70\x1d\xd4\x2b\xd2\x45\x5f\xa7\xed\xfb\xda\xff\xfc\x00\xf5\x0e\x58\x2f\x02\x70\x68\x95\x14\xdc\x33\x18\x45\x00\x84\x85\x55\x9c\xb0\xde\x4c\x9b\xb2\x5a\xed\x06\x9d\x6d\xb6\xfa\x7b\x52\xaa\x96\x30\x9a\xb8\xd4\xe8\x9a\xf4\xfe\x59\xb7\xeb\x25\x0b\xbe\x39\x05\x07\x65\x19\x27\xeb\x1f\xfb\x7d\xb6\x62\x65\x19\xa7\xdc\x6d\x90\x8e\xf6\xf7\xfb\x6e\x49\x12\x94\x4a\x8c\x92\x62\xc7\xa0\x2c\xe3\x71\x23\x17\xcf\xba\x70\xab\xd0\xa1\x37\xc1\x09\x6c\x39\xa8\x82\xff\x07\xf4\xd4\x89\x01\x08\x1b\x18\xf4\x46\xc3\x5e\x27\x7a\x05\x22\xe7\x7a\x23\xf5\x06\x28\x97\x1e\x0a\x2c\x8c\xdb\x81\x92\x85\x24\x78\x97\x4a\x81\x36\x54\xe7\x20\xe4\xe6\x1d\x8a\x20\xf2\x63\xd6\x19\xd1\xc1\x30\x90\x93\xe8\x81\x0c\x04\x8f\x31\xa4\x39\x27\x58\x23\xa7\xe0\xb0\xa6\x13\xa6\x40\xa8\xce\xc3\x75\xca\x6b\x46\x06\x37\xd7\x8f\xb2\x01\x50\x6f\xdb\x1e\x4e\xed\x9e\xa6\xe3\xc9\x72\x3a\x9f\x24\x8b\xd9\x3c\xed\xb0\x6c\xb9\x0a\xc7\x8b\xc9\x06\x03\x24\x91\xb1\xeb\x9b\xbf\xee\x3e\xe1\x18\x4f\x93\xa7\xe5\xd3\x22\x5d\x26\x8b\xc5\xf3\x67\x1c\x65\x19\xbf\x4a\xc2\x99\x5e\x9b\x78\x8c\x36\x8f\x1f\x52\x37\x79\x48\x8c\x51\xad\xf6\x9f\xf1\x4d\xee\xd3\xfb\xef\x22\x7c\xf9\x6f\x99\x2c\x26\xcb\xf9\xfd\xcb\xf4\x23\xdb\xdf\xce\x14\xdd\xd3\x05\x58\x4b\x54\xd9\x3f\xb8\x3e\x8f\x1f\x91\x84\x53\xce\x9a\xeb\x1f\x57\x22\x97\x55\x67\xc9\x37\x6a\x7a\xe2\x14\x7c\x6c\x4d\xd6\xa2\xdd\x1a\x15\x0a\x7c\x31\x41\x77\xef\xe9\x69\x23\x02\x6d\xde\x7f\xc3\x9d\x93\x7a\xd3\xbd\x28\x55\x49\x4d\x5c\x1d\xf0\xa0\x4a\x1c\x74\x32\x1c\xf2\x6c\xa1\xd5\x8e\x01\xb9\xf0\xcb\x64\xf3\xd6\x9d\x84\x9a\xef\x39\xe9\x3e\x7d\xc7\x74\x67\xc8\x08\xa3\x18\xa4\xe3\xe4\x72\x55\xf3\x24\x5e\xae\xaa\xad\x76\xa4\xbf\xf4\xe8\x51\x38\xa4\x6e\x4b\xeb\xd8\xfc\x63\xd9\xef\xce\x86\xfe\xca\x18\xf2\xe4\xb8\xfd\x93\x29\x41\x87\xf7\x2c\xf9\x62\x74\x5c\x1c\x05\x3f\x03\x00\x00\xff\xff\x86\x21\x47\xb1\xe6\x06\x00\x00")

func btrdbStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_btrdbStatefulsetYaml,
		"btrdb.statefulset.yaml",
	)
}

func btrdbStatefulsetYaml() (*asset, error) {
	bytes, err := btrdbStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "btrdb.statefulset.yaml", size: 1766, mode: os.FileMode(436), modTime: time.Unix(1488387869, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _create_admin_keySh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xce\x41\x4e\xc3\x30\x10\x85\xe1\xbd\x4f\xf1\x68\x58\xc0\x62\xe8\x31\xd8\x20\xae\x80\x1c\x7b\x52\x8f\x12\x8f\x2d\xcf\x44\xa8\xaa\x7a\x77\x14\x29\x1c\xe0\xff\xde\x9b\x5e\xae\xb3\xe8\x75\x8e\x56\xc2\x84\xc7\x03\x1f\x9f\xac\x5f\xa2\x8c\xe7\x33\x4c\x5e\xc4\x90\x06\x47\x67\x43\x84\xf2\x2f\x4a\x33\xc7\xca\x77\x2c\x6d\xc0\x0b\x23\x35\xb5\xb6\x31\xa2\x66\xf4\xdd\x0d\xe2\x10\x45\x3c\x02\xe3\x34\xd8\x43\xdf\xad\x64\xbc\xbe\xd5\xd5\xb9\x76\x50\x7e\x0f\x66\x85\x56\xbe\xdf\x58\x41\x8e\x61\x11\xf4\x8d\xcb\x05\xb4\x40\xf2\xcf\xb0\x18\xd6\x7d\xe6\xe4\xdb\x39\x7f\x52\xb8\xb1\xf2\x90\x84\x98\xab\x28\x1d\x67\x0e\x06\x44\xcb\x68\x95\x16\xd9\xf8\xbf\xef\xad\xe7\xf0\x17\x00\x00\xff\xff\xc0\x65\x6b\x87\xdf\x00\x00\x00")

func create_admin_keyShBytes() ([]byte, error) {
	return bindataRead(
		_create_admin_keySh,
		"create_admin_key.sh",
	)
}

func create_admin_keySh() (*asset, error) {
	bytes, err := create_admin_keyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "create_admin_key.sh", size: 223, mode: os.FileMode(436), modTime: time.Unix(1488387354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _createdbJobYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x5f\x6f\xd3\x30\x10\x7f\xcf\xa7\x38\x6d\xaf\x34\x11\xf0\x80\xf0\x5b\xd7\x16\x56\xb4\x36\x11\x44\x48\x08\xa1\xea\x92\x5c\x1b\xab\x8e\x5d\xd9\x97\x6c\x55\x94\xef\x8e\xbc\xb6\x21\xd9\x8a\x78\xe1\x9e\x9c\xfb\xfd\x3b\x5b\x97\x5b\x68\x5b\x08\x3f\x93\x7e\x90\x9a\xa0\xeb\x82\x5b\x2e\xa5\x83\xdc\x12\x32\x39\xe0\x92\xa0\x40\xc6\x0c\x1d\x81\xd4\x90\xd3\xa1\x0c\x61\xb9\x85\xa3\xa9\xc1\xd6\x1a\x9e\xd9\x8f\x25\xf9\x13\x59\x02\xe9\x00\x75\x70\x4b\x4f\xd2\xb1\xd4\xbb\x5e\xfc\xe6\x59\xf1\x28\x95\x82\x12\x1b\x02\x84\x0c\x0b\x60\x59\x51\x18\xe0\x41\x7e\x27\xeb\xa4\xd1\x02\x32\xe4\xbc\x8c\x9a\xb7\xc1\x5e\xea\x42\xc0\x17\x93\x05\x15\x31\x7a\x1b\x11\x00\x68\xac\x48\x40\xc6\xb6\xc8\x26\xa7\x19\x8b\x2c\x70\x07\xca\x3d\xc8\x54\x1d\x14\x32\xf9\x33\xc0\x50\xe6\xeb\xaa\xd4\x03\x17\xb9\x2f\x4b\x8e\xd1\x72\x62\x94\xcc\x8f\x02\xd6\xd4\x90\x3d\x43\xb9\xd1\x8c\x52\x93\x75\x17\xf2\xe4\xef\x9e\xbe\x64\x85\xbb\x0b\x1a\xb5\x6d\x98\x6c\x9f\xba\xae\xc8\x44\xdb\x86\x29\xda\x1d\xf1\xf9\xd2\x5d\x37\x96\x24\xb5\x52\x97\x01\xda\x36\x9c\xf5\xb9\xe1\x72\x0c\x0f\x84\x68\x77\x4e\xc0\x4f\xb8\xa9\x70\x4f\x45\x76\x03\xbf\x7a\x88\x74\x23\xfa\x8f\x3f\x43\x2f\xd2\xd9\x7c\xb3\x58\xcf\x93\x78\xb9\x4e\x07\x38\x40\x83\xaa\x26\x01\x25\xf3\x41\x44\x11\x71\x5e\x88\x77\xef\x3f\x7c\xbc\xe2\x31\x5b\x24\xf7\x9b\xfb\x38\xdd\x24\x71\xfc\x70\xcd\xa3\x6d\xc3\x6f\x92\x69\xa9\xb7\x26\x9c\xf9\xd5\xb9\x4b\xed\xfc\x2e\x31\x46\x0d\x66\x7f\xe1\x37\x9f\xa6\xd3\xff\x65\xb8\xfa\xb1\x49\xe2\xf9\x66\x3d\x5d\x2d\x5e\xbb\x7d\xb2\xa6\x12\xa3\x36\xc0\x56\x92\x2a\xbe\xd2\xf6\x65\xff\x8c\x24\xc8\xa5\xe8\x37\x2b\xf4\x21\x3d\xb1\x31\xaa\xae\x68\x65\x6a\xcd\xee\xda\x83\xfb\x5f\x67\xb2\xa7\xa3\x95\x7a\x37\x72\xaf\xbc\xe4\xe4\xec\x5f\x3b\xf2\xc4\x68\xc4\xb0\x84\x45\xac\xd5\x51\x00\xdb\xfa\x92\x78\xca\x1b\x44\xfd\x23\xc8\x51\x6e\x89\xc7\x17\x3b\xf5\xd6\xaf\x65\xbf\x03\x00\x00\xff\xff\x40\xa1\xbf\xa5\x17\x04\x00\x00")

func createdbJobYamlBytes() ([]byte, error) {
	return bindataRead(
		_createdbJobYaml,
		"createdb.job.yaml",
	)
}

func createdbJobYaml() (*asset, error) {
	bytes, err := createdbJobYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "createdb.job.yaml", size: 1047, mode: os.FileMode(436), modTime: time.Unix(1488387869, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x5d\x8f\xea\x36\x13\xbe\xcf\xaf\x18\xb1\xb7\x2f\x2c\x1f\xef\x69\x77\x23\xf5\x22\x1b\xd2\x15\x2a\x84\x14\xb2\x5b\x1d\x55\x55\x64\x9c\x61\xd7\x3a\x8e\x9d\x63\x3b\x9c\x22\xb4\xff\xbd\x72\x02\x21\xe1\x63\x45\x6b\x2e\x48\x66\xc6\xcf\x7c\xf8\xf1\x03\x77\xb0\xdb\x41\xef\x19\xc5\x94\x09\x84\x8f\x0f\xe7\x0e\xe2\x77\xa6\x61\xcd\x38\xc2\x0f\xc6\x39\x30\xa1\x0d\x11\x86\x11\x83\x40\xc0\xbc\x2b\x44\x10\x32\x45\x40\x43\x53\xa0\xbc\xd0\x06\x15\xac\x08\xfd\x86\x29\xac\xb6\xce\x1d\x60\x96\x9b\xed\x98\x29\x88\x5e\x75\x0f\x9e\x88\x66\x94\x70\xbe\x05\xb6\x86\xad\x2c\x20\x45\x8e\x06\xc1\xbc\x23\xe4\x32\xd5\xa5\xad\xcc\xc4\xa5\x46\xe7\xce\xbe\x2b\x48\x89\x21\x0e\xc9\xd9\x2b\x2a\xcd\xa4\x70\x61\x33\x70\xbe\x31\x91\xba\xb0\x44\xb5\x61\x14\x9d\x0c\x0d\xb1\x51\xae\x03\x20\x48\x86\x6e\x59\x90\x03\xc0\xc9\x0a\xb9\xb6\x66\x00\x92\xe7\x7b\xbb\xce\x91\x5a\x5b\x2e\x95\x29\x9d\xdd\xf2\xd1\x85\xe1\xe8\xe7\xc7\x32\x36\x57\xd2\x48\x2a\xb9\x0b\xb1\x1f\x95\x96\x23\x6c\x97\x72\x86\xc2\x74\xed\x16\x07\x0e\x5d\x4f\x22\x17\x42\x29\xd0\x01\xd0\xc8\x91\x1a\xa9\x4e\xd3\x76\xbb\xdd\x56\x1b\x24\xcf\xf5\xfd\x66\xb0\x42\x43\xea\x86\x0c\x31\xb8\x2e\xf8\x12\xcd\xb5\xa6\x0e\xc5\xeb\xaa\xf7\xb0\xf4\x74\xac\xab\xe3\x00\x28\xcc\x39\xa3\x44\xbb\x30\x72\x00\x0c\x66\x39\x27\x06\xab\x4a\x9a\x80\x76\x35\x87\xd3\xae\xd4\xbe\x1d\xf2\xd8\x65\x50\x65\x4c\x10\xc3\xa4\x78\x56\x84\x62\x84\x8a\xc9\x74\x89\x54\x8a\x54\xbb\x30\xe8\xef\xe3\xa8\x14\x86\x30\x81\xaa\x46\xed\xb6\xcf\xa3\x5a\x28\x36\xc7\xac\x87\x88\x20\xf6\xc7\xc9\x74\xb2\x8c\x83\x30\x89\x82\x60\x91\xbc\x2c\xa6\xcb\x3a\x0a\x60\x43\x78\x81\x2e\xbc\x1b\x93\xbb\xf7\xf7\xfd\x5e\xf9\x71\x87\xa3\x87\xfe\xa7\x50\xfe\x74\x12\x84\xf1\xad\x60\xfb\xe3\x3f\x03\x1b\x7b\xb1\x97\x8c\x27\x8b\x73\x88\x7b\xad\x36\xf7\xad\xee\x5a\x1b\xbd\x97\x78\x9e\xf8\xf3\x59\xe4\xf9\xf1\x64\x1e\x26\x8b\x20\x0e\x42\xfb\x74\x8e\xd4\x19\x74\x2e\x63\xfc\xfe\x32\x8f\xbd\xe4\xc9\xf3\x7f\x0b\xc2\x71\xf2\xf4\x35\x0e\x2e\xb4\xd2\x79\xf8\xf2\xf0\xf8\x38\xfa\xff\x97\xc7\xe1\x15\x98\x49\x38\x89\x27\xde\x34\xf1\xa7\x2f\xcb\x38\xb8\xd0\x4a\x49\xee\xfe\x2f\xfb\xa1\x54\x6f\x3d\xfb\x55\x4e\xf9\x7f\xa5\x61\xd0\x72\x0f\x4e\xdd\xc3\x96\x7b\x78\x74\x9f\x95\x34\xfb\x9a\x44\xf3\x71\x12\x7a\xb3\xe0\xb4\x92\x5f\x95\xcc\xdc\x86\x11\x60\xcd\x90\xa7\x0b\x5c\xb7\xad\x7b\x7b\x44\xcc\xbb\x5b\x93\xbb\x67\xe1\xeb\x30\x96\x91\x37\x74\x61\x65\x54\xba\x2a\x6b\x72\x47\xbd\x41\x6f\xd4\xf6\x47\x05\xe7\x91\xe4\x8c\x6e\x5d\xf0\xf8\x0f\xb2\xd5\xb5\xbf\x56\x88\x43\xf1\x35\xc3\xa3\xb6\x60\x54\xab\x6a\xad\xd2\x87\x86\xf9\x5c\x4d\xae\x80\x35\xe6\x74\x00\xb3\xd7\x1c\xd5\x55\xb0\xdd\x8e\xad\x01\xbf\x43\x6f\xc6\x34\xed\x79\x1b\xc9\xd2\xa5\x91\x8a\xbc\xa1\xcf\x89\xd6\xb0\x26\x5c\x97\x5a\x5e\x4f\x58\xf2\x22\xc3\x99\x2c\x44\xbb\xb1\x86\xbe\xd9\x31\xa6\xac\x99\x33\xb3\xe1\xd5\x9c\x4b\xbe\xe7\x56\xc2\xb4\x6d\xb1\x82\xf3\x39\x61\x59\xbc\x17\x9b\xbd\xa2\x9e\xaa\xcd\xd5\x04\xb7\xcb\x10\xa1\x14\xb5\x9e\xc9\x14\xb5\x0b\x7f\x42\x67\x81\x24\xfd\x43\x31\x83\x73\x41\xb1\x03\x7f\xed\xc3\x14\x6a\x59\x28\x8a\x0d\x4c\x85\xdf\x0b\xd4\xcd\x8e\x01\x74\x35\x27\x2b\x5f\xcf\xec\x4c\x9c\xf1\x6f\x83\xc2\x3e\x9e\x4a\xf4\x18\x73\x2e\xb7\x99\x3d\xe1\xcb\x0a\xdd\xb5\xbf\x7f\x45\x5e\x0b\xf5\x51\x92\x07\xff\x5d\x92\x0f\xa0\xa7\x23\xb9\xae\xb8\x8d\x0d\xb7\xdc\x04\xa2\xde\x5a\x7c\xb8\xb4\xfd\x93\x8b\xd2\x92\xf4\x63\x11\x56\xb4\x5e\xa2\x64\x12\xc6\xc1\xe2\xd5\x9b\x26\xcb\xc0\x5f\xb6\xee\xf0\x41\xbd\x86\x83\x9f\xfa\xfd\xce\xbf\x61\xe9\x49\x81\x9f\x91\xf4\x88\x78\x33\xd8\x7e\x33\x0a\xf3\x7a\x64\x78\x5b\x7e\xa8\x35\x85\x67\x18\x96\x48\x15\x53\xa2\x4b\x18\xa7\x7f\x64\x6e\xe3\x50\x93\xf9\x4e\x55\x7d\x8b\xfc\xce\x19\xeb\x4f\x19\x5f\xb3\x7d\xd8\xb7\x74\xdf\xed\x50\xa4\x1f\x1f\xce\x3f\x01\x00\x00\xff\xff\x2d\x18\xaf\x31\xf4\x09\x00\x00")

func etcdStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdStatefulsetYaml,
		"etcd.statefulset.yaml",
	)
}

func etcdStatefulsetYaml() (*asset, error) {
	bytes, err := etcdStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd.statefulset.yaml", size: 2548, mode: os.FileMode(436), modTime: time.Unix(1489429703, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ingesterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x4f\x8b\xdb\x30\x10\xc5\xef\xfe\x14\x03\x3d\xc7\x6e\xda\x85\x52\x1d\x37\x31\x25\xb0\x4d\x4c\x12\xf6\xba\x8c\xed\x59\x47\xac\xfe\x21\x8d\xc3\x06\xe1\xef\x5e\xd4\x36\x8e\xbd\x0d\x54\x27\x5b\xf3\xde\xef\xbd\xd1\x27\x88\x11\xf2\x1f\x64\x9e\xa4\x21\x18\x86\x0c\x9d\x7c\x26\x1f\xa4\x35\x02\xe8\x9d\xc9\xa4\xcf\x50\x9c\x97\x35\x31\x2e\xb3\x37\x69\x5a\x01\x6b\x72\xca\x5e\x34\x19\xce\x34\x31\xb6\xc8\x28\x32\x00\x83\x9a\x04\x48\xd3\x51\x60\xf2\x8b\xde\xe9\x3e\x0b\x8e\x9a\x34\xf3\xe4\x94\x6c\x30\x08\x58\x66\x00\x4c\xda\x29\x64\x4a\x13\x80\x29\x23\x1d\x85\x35\xa9\x70\xfd\x03\x40\xe7\x3e\x62\xd3\xf5\x15\x9d\x4e\x63\x0d\xa3\x34\xe4\x47\xdb\xe2\x43\x9d\x91\x26\x35\x76\x24\xa0\x66\xdf\xd6\x45\x8c\x79\xf5\xfa\x3e\x0c\x57\x95\x88\x31\x3f\xa2\xef\x88\xff\xbe\xc2\x30\xcc\x8d\x55\xaf\x54\x65\x95\x6c\x2e\x02\x62\xcc\x57\x63\x6e\xbe\x99\x8f\x27\x46\x32\xe7\xdb\x32\xb7\x66\xe5\x71\xb5\x7e\x29\xb7\xeb\x6a\xb7\xd9\x1e\x27\x73\x80\x33\xaa\x9e\x04\x9c\x98\x9d\x28\x0a\xe2\xa6\x15\x5f\xbe\x7e\xfb\x7e\x87\xb1\x2f\x57\xe5\xe6\xb9\xdc\xbf\x54\xbb\xdd\xd3\x3d\x46\x8c\xf9\x41\x32\x6d\xcc\xab\xcd\x57\xe4\x4e\xf9\x81\xb1\x93\xa6\xab\xac\x55\x93\x8a\x37\xe2\xe3\x71\xbf\x7e\x1c\x6b\x1d\xee\x31\x7f\x3f\xdd\xa2\xb6\x96\x03\x7b\x74\xe2\xe1\x61\xf9\x79\xd4\x9d\xad\xea\x35\xfd\xb4\xbd\xe1\x70\x6f\xeb\x86\xdc\x69\xf1\x46\x17\x2f\x4d\x37\x83\xeb\x64\xa9\x90\x4f\x02\xd2\xca\x45\x12\x16\x33\x85\x27\x6c\x77\x46\x5d\x04\xb0\xef\x29\x9b\xe6\x4d\xa2\xfe\x13\x14\xa8\xf1\xc4\x62\x06\xfe\x73\xb7\xfd\xd7\xf6\x2b\x00\x00\xff\xff\xf5\x0a\x8b\x9a\x1f\x03\x00\x00")

func ingesterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_ingesterDeploymentYaml,
		"ingester.deployment.yaml",
	)
}

func ingesterDeploymentYaml() (*asset, error) {
	bytes, err := ingesterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ingester.deployment.yaml", size: 799, mode: os.FileMode(436), modTime: time.Unix(1488387869, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mrplotterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x4f\x8f\xd3\x3c\x10\xc6\xef\xf9\x14\xa3\xbe\xe7\xa4\x7f\xb6\xfb\x02\x3e\x6e\x5b\xa1\x4a\xb0\x44\xb4\xe2\x8a\x5c\x67\xb6\x58\x38\xb6\xb1\x27\xd1\x56\x56\xbe\x3b\x72\x20\xa9\x03\x2d\x3e\xb9\x33\xf3\xfc\xea\xc7\x7e\xf2\x1f\x84\x00\xc5\x7b\xd4\x1f\xa4\x46\xe8\xba\x8c\x5b\xf9\x05\x9d\x97\x46\x33\xc0\x57\x42\x1d\xb7\x7e\xde\x2e\x4f\x48\x7c\x99\x7d\x97\xba\x62\xb0\x45\xab\xcc\xa5\x46\x4d\x59\x8d\xc4\x2b\x4e\x9c\x65\x00\x9a\xd7\xc8\xa0\x76\x56\x19\x22\x74\x99\xb7\x28\x62\xdd\xa1\x55\x52\x70\xcf\x60\x95\x01\x10\xd6\x56\x71\xc2\xd8\x01\x48\xf5\x71\x29\x7e\x42\xe5\x87\x5f\x00\xdc\xda\x14\x19\x4b\x03\x36\x2e\x61\x34\x71\xa9\xd1\x8d\x92\xfc\xaf\x63\x0c\x28\x59\xf3\x33\x32\x38\x91\xab\x4e\xf3\x10\x8a\xf2\xe5\xb5\xeb\xc6\x31\x16\x42\x71\xe4\xee\x8c\xf4\xdb\x7f\xd7\x4d\x95\x65\xa3\x54\x69\x94\x14\x17\x06\x21\x14\x9b\xf1\x9f\x8b\xfd\xb4\x9d\x08\x1d\x7a\xd3\x38\x81\x89\xa1\x58\xfc\xd1\xa0\xa7\x49\x2d\x5e\x44\x6d\xdc\x85\xc1\x6c\xf5\xf8\xff\x47\x39\x9b\xf4\x84\x6d\x18\xcc\x96\x8b\xc5\xa2\x4e\x1b\x4a\xd6\xf2\x2e\xe6\x71\xb9\xba\x8d\x59\x4d\x31\xa8\xdb\x94\x30\x5c\xdf\xee\xb8\xd9\x7e\xdd\x3d\x6f\xcb\x4f\xfb\xe7\xe3\x84\xd2\x72\xd5\x20\x83\x6f\x44\x96\xcd\xe7\x48\xa2\x62\xab\x87\x37\xef\x6e\x30\x9e\x8e\x9f\xb7\x4f\x23\xe4\x70\x8b\xd2\x3f\x46\x7e\x32\x86\x3c\x39\x6e\xd9\x7a\xbd\x5c\x8c\x73\xd6\xb8\xd4\x5e\x7e\x7d\xed\xd2\x38\x62\xb0\x5e\x3f\x24\x4c\xeb\x0c\x19\x61\x14\x83\xe3\xa6\xbc\x2f\x7a\xbb\xb8\xab\xc9\xf3\x7c\x92\xff\x76\xc8\xfb\x01\x5d\x2b\x05\xfe\x33\xec\xd3\xe8\xfe\x11\xdb\x21\xb2\xa3\xa3\xbc\xdf\x8e\xa7\xa1\x3e\x78\x93\x03\xfe\xe2\xc7\x5b\x4e\xc6\x07\xc7\xe9\xfc\x50\xbb\x0a\x7c\x06\xfd\xb7\xeb\x34\x57\xfb\xd2\xb3\x10\x1c\xd7\x67\x84\xe2\x20\x09\xf7\xfa\xc5\x14\xbb\x6b\xb7\x4f\x6b\x1e\x13\xdd\x75\x21\xa0\xae\xfa\x82\x47\x85\x82\x8c\xbb\xe9\xe6\x67\x00\x00\x00\xff\xff\xd5\x0b\x2c\xbd\x35\x04\x00\x00")

func mrplotterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_mrplotterDeploymentYaml,
		"mrplotter.deployment.yaml",
	)
}

func mrplotterDeploymentYaml() (*asset, error) {
	bytes, err := mrplotterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mrplotter.deployment.yaml", size: 1077, mode: os.FileMode(436), modTime: time.Unix(1488387869, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pmu2btrdbDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xc1\x8e\x9b\x30\x10\xbd\xf3\x15\xa3\xed\x19\xd2\x6c\x23\x75\xeb\xe3\x26\xa8\x42\xaa\x76\x51\x82\xf6\xba\x1a\xcc\x6c\x6a\xd5\xd8\x96\x99\xa0\x8d\x2c\xfe\xbd\x82\x16\x42\x52\xba\x3e\x39\x6f\xfc\xde\xbc\xc9\x3c\x3e\x41\x08\x90\x7c\x27\xf3\x43\x19\x82\xae\x8b\xd0\xa9\x17\xf2\x8d\xb2\x46\x00\xbd\x33\x99\xfe\xda\xac\xda\x75\x49\x8c\xeb\xe8\x97\x32\x95\x80\x1d\x39\x6d\xcf\x35\x19\x8e\x6a\x62\xac\x90\x51\x44\x00\x06\x6b\x12\xe0\xea\xd3\x7d\xc9\xbe\x2a\xa3\xc6\x91\xec\x71\x4f\x4e\x2b\x89\x8d\x80\x4d\x04\xc0\x54\x3b\x8d\x4c\x7d\x05\x60\xce\xef\x8f\xc6\x92\x74\x33\xfe\x02\x40\xe7\xe6\x92\x3d\x34\xca\xf6\x47\x5a\xc3\xa8\x0c\xf9\x89\x12\xff\x63\x63\x94\x52\x35\x1e\x49\xc0\x00\xae\x42\x48\xf2\xb7\xf7\xae\x9b\x9e\x89\x10\x92\x02\xfd\x91\xf8\xef\xfc\x5d\x77\xcd\xcc\x4f\x5a\xe7\x56\x2b\x79\x16\x10\x42\xb2\x9d\x3a\x27\xd9\x75\x79\x46\x24\xd3\x5e\x46\xb9\x78\x4b\x8b\xed\xee\x35\x7d\xda\xe5\xcf\xd9\x53\x31\xab\x03\xb4\xa8\x4f\x24\xe0\x27\xb3\x13\xab\x15\xb1\xac\xc4\xfd\x97\xaf\xdf\x16\x34\xf6\xe9\x36\xcd\x5e\xd2\xfd\x6b\xfe\xbc\x5f\xd4\xb8\x5b\x3f\x3c\x6c\xee\x16\x98\x8f\xc5\x7e\xf7\x38\xb5\x3f\x2c\x71\x87\x7f\x24\x2e\xad\xe5\x86\x3d\x3a\xb1\xd9\xac\x3f\x4f\xef\x9c\xf5\x3c\xdb\x50\x7c\x59\x42\x6e\x3d\x0b\xe8\xfb\xce\x44\x9d\xb7\x6c\xa5\xd5\x02\x8a\x6d\x3e\xc3\x6f\xd6\x14\xeb\xa3\x3c\x47\x71\x1c\x5f\x45\xb0\x1d\x23\x77\x20\xdf\x2a\x49\x1f\xe6\xed\x3a\x3d\x37\xc9\x19\x53\x33\xb9\x8f\x87\xeb\xcc\x2e\x0f\xdb\xff\x33\xc3\x8d\xad\xff\xfa\x85\xe1\x23\xf1\x06\x75\x96\x37\x22\x04\x8f\xe6\x48\x90\x1c\x14\x53\x66\xde\x6c\x92\x5e\xaa\x43\x2c\xe2\x3e\x3a\x5d\x17\x02\x99\x6a\x00\x1a\xd2\x24\xd9\xfa\x45\xcf\xbf\x03\x00\x00\xff\xff\x55\x40\x77\x5f\x9e\x03\x00\x00")

func pmu2btrdbDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_pmu2btrdbDeploymentYaml,
		"pmu2btrdb.deployment.yaml",
	)
}

func pmu2btrdbDeploymentYaml() (*asset, error) {
	bytes, err := pmu2btrdbDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pmu2btrdb.deployment.yaml", size: 926, mode: os.FileMode(436), modTime: time.Unix(1488387869, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _receiverDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\x4d\x6f\xa3\x3c\x10\xc7\xef\x7c\x8a\x51\x9e\x33\xe4\xa5\xcf\x6a\xbb\xbe\xad\x52\x54\x21\xb5\x09\x4a\xa3\x5e\x2b\xc7\x4c\x89\x55\x63\x7b\x8d\x41\x45\x16\xdf\x7d\xe5\x74\x49\x70\x97\x74\x39\x99\x19\xcf\xcf\xe3\xbf\x67\xe6\x3f\x70\x0e\x92\x7b\x94\x0f\x5c\x22\xf4\x7d\x44\x35\x7f\x46\x53\x73\x25\x09\xe0\xbb\x45\xe9\x97\xf5\xbc\x5d\x1e\xd0\xd2\x65\xf4\xc6\x65\x41\xe0\x0e\xb5\x50\x5d\x85\xd2\x46\x15\x5a\x5a\x50\x4b\x49\x04\x20\x69\x85\x04\x0c\x32\xe4\x2d\x9a\xb8\xd1\x55\x13\xd5\x1a\x99\xf7\x19\xd4\x82\x33\x5a\x13\x58\x45\x00\x16\x2b\x2d\xa8\x45\xef\x01\x18\x33\xfc\x27\xe8\x01\x45\x3d\xfc\x01\x50\xad\x3f\x63\xbd\x79\x40\xfb\x8f\x29\x69\x29\x97\x68\xce\x61\xf1\xa7\x74\xce\x34\x5e\xd1\x12\x09\x1c\xac\x29\x0e\x73\xe7\x92\xfc\xf5\xbd\xef\x87\x5d\xc4\xb9\x64\x4f\x4d\x89\xf6\x8f\x0a\x7d\x1f\x06\xe6\x8d\x10\xb9\x12\x9c\x75\x04\x9c\x4b\xd6\xe7\x73\x93\x2c\x74\x8f\x02\x0d\xd6\xaa\x31\x0c\x47\x57\xf2\xc6\x5f\x0d\xd6\x36\xb0\x79\x29\x2a\x65\x3a\x02\xb3\x6f\xcb\xd5\x23\x9f\x05\x3e\xa6\x1b\x02\xb3\xe5\x62\xb1\xa8\xc6\x0e\xc1\x2b\x7e\x15\xb3\x5c\xac\xfe\x9f\xe6\xac\x42\x0e\xca\x76\x8c\x18\xd4\x4b\xf7\xeb\xbb\x97\x74\x73\x97\x6f\xb3\xcd\x3e\xa0\xb4\x54\x34\x48\xe0\x68\xad\x26\xf3\x39\x5a\x56\x90\xd5\xcd\xf7\x1f\x13\x8c\x5d\xba\x4e\xb3\xe7\x74\xf7\x92\x6f\x77\x93\x8c\xd9\xf2\xf6\xf6\x66\xf6\x75\xe4\xf6\x61\x2a\xd2\xb9\xe4\x89\x5b\xcc\xe4\xab\x4a\xd6\xa8\x8f\xc9\x93\xa5\x25\x97\x65\xae\x94\x18\x3d\xc0\x04\xf1\x3e\xdd\xa4\xbb\x9f\xfb\x6c\xbb\x99\xce\x68\x71\xc9\xa7\x55\xa2\xa9\xf0\x51\x35\x32\x94\x79\x60\x32\xd4\xc7\xf8\x0d\x3b\xc3\x65\x19\xbe\x82\x0f\xc9\xa9\x3d\x12\xf0\x02\xcd\xfd\xc6\x79\xb0\xc3\x20\x2d\xb6\x52\x74\x04\xac\x69\xf0\xec\xd2\xca\x8c\x8f\x8a\x2f\xe5\x9d\x2b\x63\x09\x78\xbd\x46\x1c\x6d\x94\x55\x4c\x09\x02\xfb\x75\x3e\xb2\x7f\xea\x47\x81\x25\x65\x5d\x34\xbe\x54\x70\xc8\x97\xb7\xa9\x91\x19\xb4\x61\x95\x7d\xd8\x36\x7f\x87\xc5\x71\x1c\x0c\x92\x76\x18\x1c\x4f\x68\x5a\xce\xf0\x9f\x53\x23\x9c\x01\x13\xfd\x3f\xf4\xfe\x59\xa9\xf8\xb4\x1c\x49\x63\x4f\x5d\xfc\xa1\xd7\x94\x04\xd7\xc4\xf1\x43\xcf\x48\x2a\xb2\xbc\x26\xce\x19\x2a\x4b\x84\x4b\x91\xa5\x17\xef\xa9\xbe\x62\x5f\x82\x7d\xef\x1c\xca\xe2\x64\xa8\x51\x20\xb3\xca\x5c\xcd\xfc\x77\x00\x00\x00\xff\xff\xac\x4f\x93\x37\x72\x05\x00\x00")

func receiverDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_receiverDeploymentYaml,
		"receiver.deployment.yaml",
	)
}

func receiverDeploymentYaml() (*asset, error) {
	bytes, err := receiverDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "receiver.deployment.yaml", size: 1394, mode: os.FileMode(436), modTime: time.Unix(1488387869, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"adminconsole.deployment.yaml": adminconsoleDeploymentYaml,
	"btrdb.statefulset.yaml": btrdbStatefulsetYaml,
	"create_admin_key.sh": create_admin_keySh,
	"createdb.job.yaml": createdbJobYaml,
	"etcd.statefulset.yaml": etcdStatefulsetYaml,
	"ingester.deployment.yaml": ingesterDeploymentYaml,
	"mrplotter.deployment.yaml": mrplotterDeploymentYaml,
	"pmu2btrdb.deployment.yaml": pmu2btrdbDeploymentYaml,
	"receiver.deployment.yaml": receiverDeploymentYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"adminconsole.deployment.yaml": &bintree{adminconsoleDeploymentYaml, map[string]*bintree{}},
	"btrdb.statefulset.yaml": &bintree{btrdbStatefulsetYaml, map[string]*bintree{}},
	"create_admin_key.sh": &bintree{create_admin_keySh, map[string]*bintree{}},
	"createdb.job.yaml": &bintree{createdbJobYaml, map[string]*bintree{}},
	"etcd.statefulset.yaml": &bintree{etcdStatefulsetYaml, map[string]*bintree{}},
	"ingester.deployment.yaml": &bintree{ingesterDeploymentYaml, map[string]*bintree{}},
	"mrplotter.deployment.yaml": &bintree{mrplotterDeploymentYaml, map[string]*bintree{}},
	"pmu2btrdb.deployment.yaml": &bintree{pmu2btrdbDeploymentYaml, map[string]*bintree{}},
	"receiver.deployment.yaml": &bintree{receiverDeploymentYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

