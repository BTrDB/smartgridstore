// Code generated by go-bindata.
// sources:
// ../manifest_templates/adminconsole.deployment.yaml
// ../manifest_templates/btrdb.statefulset.yaml
// ../manifest_templates/c37ingress.deployment.yaml
// ../manifest_templates/create_admin_key.sh
// ../manifest_templates/createdb.job.yaml
// ../manifest_templates/ensuredb.job.yaml
// ../manifest_templates/etcd-operator.deployment.yaml
// ../manifest_templates/etcd.cluster.yaml
// ../manifest_templates/etcd.clusterrole.yaml
// ../manifest_templates/etcd.clusterrolebinding.yaml
// ../manifest_templates/etcd.serviceaccount.yaml
// ../manifest_templates/ingester.deployment.yaml
// ../manifest_templates/mrplotter.deployment.yaml
// ../manifest_templates/pmu2btrdb.deployment.yaml
// ../manifest_templates/readme.md
// ../manifest_templates/receiver.deployment.yaml
// ../manifest_templates/secret_ceph_keyring.sh
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _adminconsoleDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xd1\x8f\xda\x3e\x0c\xc7\xdf\xfb\x57\x58\xfa\x3d\xb7\xfd\xc1\x4e\x9a\x96\xc7\x03\x34\x21\x6d\x5c\x35\xd0\x5e\x27\x93\xfa\x20\xba\x34\x89\x12\x53\x1d\xaa\xfa\xbf\x4f\x29\x50\x5a\xc6\xc6\xa4\xe5\x29\x89\xed\x8f\xbf\x76\xea\xfe\x07\x4d\x03\xd9\x67\x32\x5f\x94\x21\x68\xdb\x04\x9d\xfa\x4e\x3e\x28\x6b\x04\xd0\x3b\x93\x89\xdb\x90\xd7\x93\x2d\x31\x4e\x92\x37\x65\x4a\x01\x73\x72\xda\x1e\x2b\x32\x9c\x54\xc4\x58\x22\xa3\x48\x00\x0c\x56\x24\x40\x5a\x13\xac\xa6\xf3\x39\x38\x94\x24\xa0\x69\xb2\x0d\xfa\x1d\xf1\xea\x72\xd7\xb6\x49\x70\x24\x63\x9c\x27\xa7\x95\xc4\x20\x60\x92\x00\x30\x55\x4e\x23\x53\xb4\x00\x0c\xf9\x71\x69\xdc\x92\x0e\x97\x13\x00\x3a\x37\x4c\x09\x70\x81\xc6\x25\xad\x61\x54\x86\x7c\x1f\x90\xfe\x22\xf2\xb4\x54\x85\x3b\x12\xb0\x65\x5f\x6e\xf3\xa6\xc9\x8a\xd7\xf7\xb6\x3d\x3b\x89\x5e\xfc\xb9\x33\x6d\x3b\x8e\x2b\x0e\x5a\x17\x56\x2b\x79\xec\x0a\x9d\xf5\x59\xb3\xe5\xd8\x3c\x08\x24\x53\x5f\x8b\xb8\xea\x5a\x6c\x66\xf3\x1f\x8b\xd5\xbc\x78\x59\xae\x36\x03\x3b\x40\x8d\xfa\x40\x02\xf6\xcc\x4e\xe4\x39\xb1\x2c\x53\xa9\x15\x19\x16\xd3\x0f\x1f\x3f\xdd\x41\x3d\x6f\xbe\xcd\x9f\x7b\xd6\xfa\x1e\xac\x2b\x37\xdd\x5a\xcb\x81\x3d\x3a\xf1\xf4\x34\xf9\xbf\xf7\xab\xad\x3e\x54\xf4\xd5\x1e\x0c\x87\x7b\x52\x25\xb9\x7d\xfa\x46\x47\xaf\xcc\x6e\x04\xaf\x62\x48\x81\xbc\x17\x10\x75\xe6\xd1\x31\x1f\x79\x78\xc2\xf2\xc5\xe8\xa3\x00\xf6\x07\xba\xc3\xc6\xb2\x52\x26\xdd\xdb\xc0\x31\xc3\x1f\xe9\x9d\x6b\x20\x5f\x93\xff\xab\x24\xce\xfa\xdb\x7a\xfa\xcf\xa4\xb0\x9e\x05\x4c\xa7\xd3\xe9\x88\xe4\xbc\x65\x2b\xad\x16\xb0\x99\x15\x23\xcb\x40\x6d\xe4\x26\xc3\xce\x0d\x92\x3c\x68\x59\x20\xe9\x89\xc5\x88\x7c\xba\x5b\xfd\x3e\xec\x61\xab\x1e\x51\x6f\x02\xd3\x34\x1d\x0d\x7f\x7d\x19\xf6\x35\xf9\x5a\x49\xfa\xa7\x49\x1f\xcf\xed\x68\x66\x2f\xf3\xda\xbf\x4b\xda\x6d\x07\xcf\xc0\x1d\xee\xf4\x36\xe3\x56\xdf\xca\x88\x3f\x2c\x6f\x50\x2f\x8b\x20\x9a\xc6\xa3\xd9\x11\x64\x6b\xc5\xb4\x34\xaf\x36\x5b\x5c\xad\x9d\xa4\x34\x6a\x6d\xdb\xa6\x21\x53\x76\x17\x81\x34\x49\xb6\xfe\x8e\xca\x9f\x01\x00\x00\xff\xff\xec\xd9\x63\x47\x28\x05\x00\x00")

func adminconsoleDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_adminconsoleDeploymentYaml,
		"adminconsole.deployment.yaml",
	)
}

func adminconsoleDeploymentYaml() (*asset, error) {
	bytes, err := adminconsoleDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "adminconsole.deployment.yaml", size: 1320, mode: os.FileMode(436), modTime: time.Unix(1500317534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _btrdbStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x8f\xe2\x38\x10\xbd\xe7\x57\x94\x98\x33\x01\x66\x46\x5a\x8d\x6f\x10\xd8\x01\x6d\x37\x44\xdd\xd1\xac\xf6\x84\x8c\x53\x10\xab\x1d\xdb\x6b\x57\xe8\x45\x88\xff\xbe\x4a\x42\xb2\x09\x03\x23\xed\x97\x4f\x49\x55\xbd\xf7\xfc\x2a\x8e\xeb\x03\x9c\xcf\x10\x7e\x45\xfd\x24\x35\xc2\xe5\x12\x0c\x87\xc3\x80\x5b\xf9\x0d\x9d\x97\x46\x33\x38\x4e\x82\x37\xa9\x53\x06\xaf\xe8\x8e\x52\x60\x90\x23\xf1\x94\x13\x67\x01\x80\xe6\x39\x32\xd8\x91\x4b\x77\xd7\x37\x6f\xb9\x40\x06\xe7\x73\x98\x70\x77\x40\x5a\x37\xb1\xcb\x25\x00\x50\x7c\x87\xca\x97\x48\x00\x6e\x6d\x03\xf5\x16\x45\x19\xb4\xc6\x51\x95\x1d\x56\x8f\x0c\x3e\x7f\x9e\x8c\xab\xe2\x5a\xe8\xe0\xac\xe8\x64\xbf\x8c\xc7\xdd\x6c\x46\x64\x03\x00\xa1\x0a\x4f\xe8\x56\x31\x83\xb5\xd1\x18\x00\x78\x54\x28\xc8\xb8\xef\x74\x6f\xbd\x72\x6b\xfd\xe8\x38\xd9\x21\xf1\xd6\x35\x71\xc2\x7d\xa1\x5e\x91\xfe\x85\xf3\xc6\xa0\xaf\x7b\xb8\xae\xc0\x83\x0a\x3d\x08\x00\x1c\x5a\x25\x05\xf7\x0c\x26\x01\x00\x61\x6e\x15\x27\xac\xb7\xdb\x15\x2d\x57\xb7\x85\x37\x76\xca\xd7\x46\xa9\x5c\xc2\x68\xe2\x52\xa3\x6b\xcb\x87\x37\xfb\xae\x97\xcc\xf9\xa1\x09\x8e\xce\xe7\x30\xde\xff\x71\xb9\xa4\x3b\xd6\x5a\xb9\x36\xa8\xfa\x84\x1d\x48\x5c\x28\x15\x1b\x25\xc5\xa9\xb2\x1d\xb5\x72\xe1\xaa\x9f\xee\x00\x1d\x7a\x53\x38\x81\x1d\x07\x65\xf0\xf7\x02\x3d\xf5\x62\x00\xc2\x16\x0c\x06\x93\xf1\xa0\x17\xfd\x00\x22\xe3\xfa\x20\xf5\x01\x28\x93\x1e\x72\xcc\x8d\x3b\x81\x92\xb9\x24\x78\x97\x4a\x81\x36\x54\xd7\x20\x64\xe6\x1d\xf2\x42\x64\xd7\xaa\x1b\xa2\xca\x30\x90\x93\xe8\x81\x0c\x14\x1e\x43\x48\x32\x4e\x20\x3d\xd0\x3b\xf2\x37\x4c\x61\x77\x82\xd9\xd3\x26\xfa\x65\x1b\x4d\xa3\xe5\x02\x76\xa8\xcc\x7b\x8f\xa6\x66\x66\xf0\xe9\xe3\x57\xd9\x26\x50\x1f\xbb\x5e\x9a\xb6\x2f\x92\x68\xbe\x5d\xac\xe7\xf1\x66\xb5\x4e\x7a\x2c\x47\xae\x8a\xeb\x11\x66\xa3\x11\x92\x48\xd9\xc7\x4f\x3f\x7d\xb9\xc3\x11\x2d\xe2\xe5\x76\xb9\x49\xb6\xf1\x66\xf3\x74\x8f\xe3\x7c\x0e\x5f\x25\xe1\x4a\xef\x4d\x18\xa1\xcd\xc2\x59\xe2\xe6\xb3\xa5\xa1\xd8\x18\xd5\xf9\x12\x37\x94\xf3\x69\x32\xfd\x9b\x9c\x73\x4e\xfc\x21\xe9\x2c\x79\x99\xcf\xb6\x9d\xde\xdd\xe3\x1d\x4c\xc6\xd5\x1a\x3c\x24\x58\xac\xa7\xb3\xa7\xc5\x76\xf3\x6d\xf1\xf2\xeb\x34\x89\x96\x77\x59\x4e\xe8\xef\x31\x3c\xff\xb6\x8d\x37\xf3\xed\x7a\xfa\x7c\x47\xfc\x67\x67\xf2\xfe\x79\x03\xd8\x4b\x54\xe9\x0b\xee\x6f\xe3\xd7\x4c\xcc\x29\x63\xed\x0f\x19\x96\x22\x8f\x55\x57\xf1\x7f\xa8\xe9\x89\x53\xe1\x43\x6b\xd2\x0e\xed\xd1\xa8\x22\xc7\x67\x53\xe8\xfe\x9f\xd3\x6c\x44\xa0\xcd\x86\x6f\x78\x72\x52\x1f\xfa\x47\xb6\x84\xd4\xc4\xe5\x51\x1b\x95\x85\xa3\x5e\x85\x43\x9e\x6e\xb4\x3a\x31\x20\x57\xfc\x65\xb2\xbd\x9f\x1b\xa1\xf6\x86\x89\xfb\xd7\xf5\xb5\xdc\x19\x32\xc2\x28\x06\x49\x14\x3f\x46\xb5\xd7\xf8\x63\x54\x6d\xb5\x27\xfd\x43\x8f\x1e\x85\x43\xea\xb7\xb4\x8e\xad\xbf\x87\xfd\xd3\x89\x37\xdc\x19\x43\x9e\x1c\xb7\xff\xef\xec\xa3\x8a\x2c\xfe\xc1\x40\x7c\x38\xe0\xfe\x0c\x00\x00\xff\xff\x16\x52\xb4\x85\xde\x07\x00\x00")

func btrdbStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_btrdbStatefulsetYaml,
		"btrdb.statefulset.yaml",
	)
}

func btrdbStatefulsetYaml() (*asset, error) {
	bytes, err := btrdbStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "btrdb.statefulset.yaml", size: 2014, mode: os.FileMode(436), modTime: time.Unix(1501541107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _c37ingressDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x50\xc1\x6e\xea\x30\x10\xbc\xfb\x2b\x56\x7a\x67\x92\x97\x82\x84\xea\x23\x04\x55\x48\x15\x8d\xda\xa8\xd7\x6a\xe3\x6c\xa9\x55\xc7\xb1\xec\x05\x81\x22\xff\x7b\x15\x0a\x01\xaa\xcc\xc9\xde\xf1\xcc\xec\xf8\x1f\x74\x1d\x24\x4f\x64\x9f\xb5\x25\x88\x51\xa0\xd3\xef\xe4\x83\x6e\xad\x04\x3a\x30\xd9\xfe\x18\xd2\x7d\x56\x11\x63\x26\xbe\xb5\xad\x25\xe4\xe4\x4c\x7b\x6c\xc8\xb2\x68\x88\xb1\x46\x46\x29\x00\x2c\x36\x24\x41\x4d\xe7\xda\x6e\x3d\x85\x70\x1e\x05\x87\x8a\x24\x74\x5d\x52\xa2\xdf\x12\x6f\x2e\xb3\x18\x45\x70\xa4\x7a\xa9\x27\x67\xb4\xc2\x20\x21\x13\x00\x4c\x8d\x33\xc8\xd4\x33\x00\xb7\x11\x3d\x0c\x56\x64\xc2\xe5\x06\x80\xce\xfd\x49\x05\xb8\xf8\xf6\x50\xad\x65\xd4\x96\xfc\xa0\x99\x8c\xad\xfa\x0b\xdd\xe0\x96\x24\x54\xec\xeb\x2a\xed\xba\xa4\xf8\x3c\xc4\x78\x7d\x27\x87\x16\xe7\x5f\x8a\xf1\x5e\x5a\xec\x8c\x29\x5a\xa3\xd5\xf1\xd4\x78\x39\x64\x27\xeb\x7b\xfa\x46\x48\x76\x7f\x6d\x73\xdd\x6e\x55\x2e\xf3\x8f\xd5\x26\x2f\x5e\xd6\x9b\xf2\x86\x07\xd8\xa3\xd9\x91\x84\x2f\x66\x27\xd3\x94\x58\xd5\xf2\x61\x3a\x7f\x1c\xf1\x58\x94\xaf\xf9\x62\x30\x79\x1b\x73\x39\x55\x9d\x54\x6d\xcb\x81\x3d\x3a\x39\x9b\x65\xff\xc5\x4f\x00\x00\x00\xff\xff\x72\x33\x58\x12\x18\x02\x00\x00")

func c37ingressDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_c37ingressDeploymentYaml,
		"c37ingress.deployment.yaml",
	)
}

func c37ingressDeploymentYaml() (*asset, error) {
	bytes, err := c37ingressDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "c37ingress.deployment.yaml", size: 536, mode: os.FileMode(436), modTime: time.Unix(1500317534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _create_admin_keySh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xce\x41\x4e\xc3\x30\x10\x85\xe1\xbd\x4f\xf1\x68\x59\xc0\xc2\xed\x31\xd8\xa0\xae\xd8\x23\xd7\x7e\x89\xad\x24\x63\xcb\x33\x11\x54\x51\xee\x8e\x22\x95\x03\xfc\x9f\xfe\xf3\xcb\xf5\x5e\xe4\x7a\x0f\x9a\xdd\x19\xdb\x86\xcb\x07\xe5\xb3\x08\xb1\xef\xee\x6c\xb9\x28\x62\x67\x30\x2a\x02\x84\x3f\xc8\x55\x0d\x13\x1f\x18\x6a\x87\x65\x22\x56\xd1\x3a\x13\x41\x12\xda\x6a\x8a\x62\x28\x82\x70\x04\xca\xd8\x69\x4e\x69\xf0\xfc\x75\x6d\xd5\x9c\xf0\xfa\xb6\x4c\xc6\xa5\xc1\xa7\x77\xa7\x9a\xfd\xc4\xc7\x48\x81\x37\x74\x0d\xf0\x37\x9c\x4e\xf0\x03\x4a\xfa\xee\x1a\xdc\xb4\xde\x19\x6d\x7e\x6e\x3c\x49\x8c\x14\xf6\x12\xe1\x05\xdb\x76\xf9\x0a\x7d\xa4\xdd\xc2\x42\x6d\x21\x72\xdf\x11\xd2\x52\xc4\x1f\xb3\x07\x0f\xef\x87\x5e\x17\x3f\x94\x99\xff\x6e\xab\x2d\xb9\xbf\x00\x00\x00\xff\xff\xa2\x3b\x50\x44\xff\x00\x00\x00")

func create_admin_keyShBytes() ([]byte, error) {
	return bindataRead(
		_create_admin_keySh,
		"create_admin_key.sh",
	)
}

func create_admin_keySh() (*asset, error) {
	bytes, err := create_admin_keyShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "create_admin_key.sh", size: 255, mode: os.FileMode(436), modTime: time.Unix(1500317534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _createdbJobYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4d\x6f\xda\x40\x10\x86\xef\xfe\x15\xa3\x70\x6d\x8c\xda\x1e\xaa\xee\x8d\x60\x12\xdc\x06\xdb\x0a\xee\x97\xaa\x0a\x8d\xed\x01\xaf\xb2\xde\x45\xeb\x31\x04\x59\xfe\xef\xd5\x06\x70\x20\x1f\xaa\xba\xa7\x65\x66\xde\xe7\x65\x66\xc7\x03\x68\x5b\xf0\x6f\x48\xdf\x4a\x4d\xd0\x75\xde\x80\x4b\x59\x43\x6e\x09\x99\x6a\xe0\x92\xa0\x40\xc6\x0c\x6b\x02\xa9\x21\xa7\x75\xe9\x43\xb8\x84\x9d\x69\xc0\x36\x1a\x1e\xab\xb7\x25\xb9\x1b\x59\x02\x59\x03\x6a\x6f\x40\x0f\xb2\x66\xa9\x57\xbd\xf8\xdd\xa3\x62\x2b\x95\x82\x12\x37\x04\x08\x19\x16\xc0\xb2\x22\xdf\x1b\x40\x10\x43\x14\xa7\xf0\x6d\x3e\x81\x74\x1a\xce\xe1\x3a\xbe\x83\x59\x78\x73\x37\x4a\xc3\xe8\x06\x46\x11\x4c\x7e\x86\xf3\xc7\x7b\x30\x4a\x47\x57\xa3\xf9\xc4\xc3\xb5\xfc\x4e\xb6\x96\x46\x0b\xc8\x90\xf3\x72\xb8\x79\xef\xdd\x4b\x5d\x08\xf8\x62\x32\xaf\x22\x46\xe7\x2d\x3c\x00\x8d\x15\x09\xc8\xd8\x16\xd9\xe5\xbe\xb1\x22\x3b\x84\xeb\x35\xe6\x24\xa0\x6d\xfd\x14\xed\x8a\x38\x3a\xc6\xba\xce\xab\xd7\x94\x3b\x39\x53\xb5\x56\xc8\xe4\xee\x00\xa7\x60\x77\xde\x80\x03\x1c\xe5\xee\x58\xaa\x19\x2d\x27\x46\xc9\x7c\x27\x20\xa2\x0d\xd9\x43\x2a\x37\x9a\x51\x6a\xb2\xf5\xb1\xf8\xf2\x6d\xa6\x3b\xf2\xab\x36\xdb\x1f\x25\x72\x38\xaa\x02\x23\xf5\x4a\x40\x41\x8a\x98\xf6\x6f\xa1\xdc\x3b\xca\xc3\x03\x11\x2a\xb5\x83\x2d\x6a\x06\x36\xd0\xd4\x87\x9a\xa5\x54\xf4\xc4\xab\x70\x75\x74\x1b\xb6\xad\x9f\x2c\x1f\xba\xae\xc8\x44\x3f\x93\xc3\x98\xbb\xee\x5c\x92\x34\x4a\x1d\x1b\x6a\x5b\x7f\xdc\xf7\xe1\x87\xe7\xe9\x13\x21\xda\x55\x2d\xe0\x37\x5c\x54\x78\x4f\x45\x76\x01\x7f\xfa\x14\xe9\x8d\xe8\x7f\x3c\x0d\x61\x92\x8e\x83\xc5\x24\x0a\x92\x38\x8c\xd2\x93\x3c\xc0\x06\x55\x43\x02\x4a\xe6\xb5\x18\x0e\x89\xf3\x42\x7c\xf8\xf8\xe9\xf3\x2b\x8c\xf1\x24\x99\x2e\xa6\x71\xba\x48\xe2\xf8\xf6\x35\x46\xdb\xfa\x73\xc9\x14\xea\xa5\xf1\xc7\x6e\xc3\xaf\x52\x1b\x5c\x4d\x0d\x27\xc6\xa8\x93\xbf\xff\x0c\xe9\x76\xf1\x3f\x99\x01\x32\xbe\x09\x9d\xfd\x5a\x24\x71\xb0\x88\x46\xb3\xc9\x4b\xe2\xb5\x35\x95\x38\x0b\x03\x2c\x25\xa9\xe2\x8e\x96\xcf\xe3\x87\x4c\x82\x5c\x8a\x7e\x61\x7d\x67\xd2\x17\x6e\x8c\x6a\x2a\x9a\x99\x46\x73\xfd\xda\xdc\xdd\x87\x7e\x79\x4f\x3b\x2b\xf5\xea\x8c\x5e\x39\xc9\x9e\xec\x86\x3e\x74\x85\xc3\xb3\x0a\x4b\x58\xc4\x5a\xed\x04\xb0\x6d\x8e\x8e\x7b\xbf\x13\xab\x7f\x18\xd5\x94\x5b\xe2\xf3\xc6\xf6\xb1\xe8\xa5\xec\x6f\x00\x00\x00\xff\xff\x98\x9d\xd1\x1e\xc5\x04\x00\x00")

func createdbJobYamlBytes() ([]byte, error) {
	return bindataRead(
		_createdbJobYaml,
		"createdb.job.yaml",
	)
}

func createdbJobYaml() (*asset, error) {
	bytes, err := createdbJobYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "createdb.job.yaml", size: 1221, mode: os.FileMode(436), modTime: time.Unix(1501622185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ensuredbJobYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x8f\x9b\x30\x10\x85\xef\xfc\x8a\xd1\xee\xb5\x0b\x6a\x7b\xa8\xea\x5b\x36\xa4\x4d\xaa\x0d\xa0\x16\x55\xaa\xaa\x2a\x32\x78\x02\xd6\x1a\x1b\xd9\x03\xdb\x08\xf1\xdf\x2b\x36\x81\x86\xdd\x44\x55\x7d\x82\x79\xf3\xbe\xe7\x19\xf9\x16\xba\x0e\xfc\xcf\xa8\x1f\xa4\x46\xe8\x7b\xef\x16\xa8\x94\x0e\x2a\x59\x58\x4e\xe8\x60\x6f\x4d\x05\x1c\x9c\xd4\x85\x42\xa8\x8d\x51\x70\x9f\xda\xf0\x1e\xc8\x00\x07\x92\x68\x51\x80\x23\x63\x79\x81\x47\xc5\xbb\x05\x49\x20\x0c\x3a\xd0\x86\xa0\x32\x2d\x02\x95\x08\x46\x09\x10\x9c\xf8\x1b\xc8\x1a\x02\x8d\x4f\xcf\x7f\xf0\x24\x95\x82\x0c\xa1\xb6\xa6\x46\xab\x0e\x27\xa6\xef\xf1\x5a\x7e\x47\xeb\xa4\xd1\x0c\x32\x4e\x79\x19\xb4\x6f\xbd\x47\xa9\x05\x83\x2f\x26\xf3\x2a\x24\x3e\x00\x98\x07\xa0\x79\x85\x0c\x32\xb2\x22\xbb\x43\xed\x1a\x8b\x22\x3b\x95\x5d\xcd\x73\x64\xd0\x75\x7e\xca\x6d\x81\x14\x8d\xb5\xbe\xf7\x5c\x8d\xf9\x60\x27\xac\x6a\xc5\x09\x87\x6f\x80\x73\xf0\x70\xae\xc0\x01\x46\xfb\x70\x2c\x3a\xe2\x96\x12\xa3\x64\x7e\x60\x10\x61\x8b\xf6\x24\xe5\x46\x13\x97\x1a\xad\x1b\x9b\xef\xae\x33\x87\x23\x2b\x5e\x8c\x6a\xd0\x75\x7e\xb2\xff\xdd\xf7\x22\x63\xd3\x0c\xa7\xb5\xf4\xfd\xdc\x92\x34\x4a\x8d\x17\xe8\x3a\x7f\x39\xe5\xfa\x9b\xb9\x7c\x66\xe4\xb6\x70\x0c\x7e\xc2\xcd\x78\x8b\x1b\xf8\x35\x89\xa8\x5b\x36\xfd\xfc\xbd\xf6\x2a\x5d\x86\xbb\x55\x14\x26\xf1\x26\x4a\xcf\x74\x80\x96\xab\x06\x19\x94\x44\x35\x0b\x02\xa4\x5c\xb0\x77\xef\x3f\x7c\xbc\xc0\x58\xae\x92\xf5\x6e\x1d\xa7\xbb\x24\x8e\x1f\x2e\x31\xba\xce\xff\x26\x09\x37\x7a\x6f\xfc\x25\xd6\xa5\xff\xfc\xb6\xd6\x86\x12\x63\xd4\xd9\x00\x2f\x90\xe1\x22\x5d\xfc\x27\x33\xe4\xc4\xaf\x42\xb7\x3f\x76\x49\x1c\xee\xa2\xc5\x76\xf5\x9a\xf8\xc9\x9a\x8a\xcd\xca\x00\x7b\x89\x4a\x7c\xc5\xfd\xcb\xfa\x49\x49\x38\x95\x6c\x7a\x62\xfe\x10\x32\x35\xb6\x46\x35\x15\x6e\x4d\xa3\xc9\x5d\xda\x7b\x8e\x75\x79\xf7\x88\x07\x2b\x75\x31\xa3\x57\x83\xe5\x48\x1e\x96\x1e\x0c\x8d\xc1\xac\xc3\x22\x17\xb1\x56\x07\x06\x64\x9b\x31\xf1\x98\x77\x16\xf5\x8f\x20\x87\xb9\x45\x9a\x0f\x76\xac\x45\xaf\x6d\x7f\x02\x00\x00\xff\xff\xa4\x2e\x0a\x79\x59\x04\x00\x00")

func ensuredbJobYamlBytes() ([]byte, error) {
	return bindataRead(
		_ensuredbJobYaml,
		"ensuredb.job.yaml",
	)
}

func ensuredbJobYaml() (*asset, error) {
	bytes, err := ensuredbJobYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ensuredb.job.yaml", size: 1113, mode: os.FileMode(436), modTime: time.Unix(1501626218, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdOperatorDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xcf\x4f\x3a\x31\x10\xc5\xef\xfd\x2b\x26\xf9\x9e\x59\xe0\xf0\xbd\xf4\x46\x04\xbd\x08\x12\x35\x26\x9e\xc8\xd0\x7d\x60\x63\x7f\xd9\x76\x37\x92\xcd\xfe\xef\x66\x09\xbb\x42\x22\x9e\x9c\xd3\xf4\xd3\x79\xef\x4d\xda\x7f\xd4\x34\x54\xdc\xc1\xdd\x6b\x07\x6a\x5b\xc1\x41\xbf\x20\x26\xed\x9d\x24\x7c\x66\xb8\xae\x4d\xe3\x7a\xba\x45\xe6\xa9\x78\xd7\xae\x94\x34\x47\x30\xfe\x60\xe1\xb2\xb0\xc8\x5c\x72\x66\x29\x88\x1c\x5b\x48\x42\x56\xe5\xc8\x07\x44\xce\x3e\x9e\x68\x0a\xac\x20\xa9\x69\x8a\x67\x8e\x7b\xe4\x55\xcf\xda\x56\xa4\x00\xd5\xa9\x23\x82\xd1\x8a\x93\xa4\xa9\x20\xca\xb0\xc1\x70\x46\x77\x43\x74\x9e\xd2\x95\xe1\x2d\x4c\xea\x4f\xd7\x92\x89\x7a\xef\x63\x8f\x58\x6b\x85\x99\x52\xbe\x72\xc7\x0d\x7e\x52\x10\x29\xef\x32\x6b\x87\x38\xf8\x8f\xae\xfa\x77\xa5\x2d\xef\x21\xe9\xa3\xe2\x43\xa1\xfd\x58\xf9\x08\x9f\xc6\x17\xb3\xb2\x9e\x14\xff\x8b\xc9\x20\x81\xab\xbf\x77\xef\xdd\x97\xaf\x9b\xf5\xc3\x7c\xb3\x9a\x2d\x17\x4f\xeb\xd9\xcd\x62\x18\x20\xaa\xd9\x54\xb8\x8d\xde\xca\x33\x48\xb4\xd3\x30\xe5\x23\x76\x97\xf4\xc4\xd7\x9c\xdf\xe4\xf0\x70\xc5\xf0\x0b\xbf\xe5\xfe\x7d\xa4\xf8\x0a\x00\x00\xff\xff\xbc\xa5\x0e\x1a\x61\x02\x00\x00")

func etcdOperatorDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdOperatorDeploymentYaml,
		"etcd-operator.deployment.yaml",
	)
}

func etcdOperatorDeploymentYaml() (*asset, error) {
	bytes, err := etcdOperatorDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd-operator.deployment.yaml", size: 609, mode: os.FileMode(436), modTime: time.Unix(1501634719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdClusterYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcb\x8e\x9b\x4c\x10\x85\xf7\x3c\x45\x09\x6f\xff\x9f\xf8\x92\x91\x6c\x76\x36\x83\x22\x2b\x19\xec\xc4\x8c\xa5\xac\x50\xb9\xa9\x31\xad\x81\x6e\xd4\x5d\x4d\xc6\x63\xf9\xdd\xa3\x06\x1c\x29\xc9\x22\xbb\xa6\x74\xce\xc7\xa9\xcb\x04\xae\x57\x88\x3e\x91\xfa\x22\x15\xc1\xed\x16\x60\x2b\x8f\x64\xac\xd4\x2a\x86\x90\x58\x94\x51\x89\x8c\x27\xb4\x14\x09\x6d\x48\xdb\x48\xe8\xe6\x43\x37\x3b\x11\xe3\x3c\x0c\x5e\xa5\x2a\x63\x08\x53\x16\x65\x52\x3b\xcb\x64\xc2\xa0\x21\x46\x6f\x8a\x03\x00\x85\x0d\x8d\xa0\x70\xfc\xb4\x2d\x0a\x8a\xe1\x7a\x8d\x72\x34\x67\xe2\xec\x5e\xbb\xdd\x02\xdb\x92\xf0\x36\x2b\xdf\x29\x86\x45\x00\xd0\xfd\x0a\xb3\x88\x66\xd1\xd2\x43\x4e\x28\x5e\x5d\xeb\x65\xf7\xf7\x56\x31\x99\x0e\xeb\xad\x3a\x90\xd0\x3e\xd1\x7c\x3a\x9d\xf6\x82\x06\xdf\x36\xbd\xc6\xc6\xb0\x18\x4a\x96\xb5\xc1\x33\xe5\x97\xd6\x47\xdb\xfb\x1f\x58\x26\xc5\x47\x5d\xbb\x86\xc2\x5e\xd3\x76\x03\x1f\xa0\xeb\xab\x07\xf9\x4e\x5b\xf5\xb4\x19\xc8\x3d\xbb\xd5\xe5\xa0\xf1\xcd\x91\x1a\x0d\xff\x8f\x2d\xa7\x79\xf2\x58\xac\x9f\xf3\x5d\x91\xec\x9e\xf6\xeb\x24\xdf\xee\xb2\xe2\x5b\x9a\xa7\x99\x7f\xdd\xd9\x58\x3b\x9f\x61\x16\xfe\xed\xfd\xfa\xbc\xcb\xd7\xc5\x66\x9d\x7c\x4e\xb3\xc7\x62\xf3\x3d\x4f\x0f\x7f\xb8\x96\x0f\xcb\xd5\x6a\xf1\xf1\x61\x35\xf7\xf6\x89\x7c\x81\x8b\x76\x50\x61\x47\x50\x61\x09\x08\x02\x19\x2d\x1b\xdd\x56\x52\xc0\x0b\xca\xda\x19\x02\x54\x25\xa0\x21\x60\x73\x91\xea\x0c\xac\xc1\x90\x9f\x08\x01\x42\x6b\xa8\x93\xda\x59\x8f\x1b\x26\x0b\x52\xb1\x06\x04\x45\x3f\x40\x0c\x0b\xfe\x0f\x9c\x12\xba\x69\x48\x31\x70\x25\x6d\x04\x79\x45\xb0\x3f\x42\xe3\x2c\x83\x65\x59\xd7\x40\x6f\xd2\xb2\xa7\x8c\x6c\x3f\x9b\xc9\x7d\x5b\xe3\xa1\x64\xbf\x9f\xc6\xe4\xdf\x8b\xf9\x19\x00\x00\xff\xff\x8a\x45\x3a\x96\xad\x02\x00\x00")

func etcdClusterYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdClusterYaml,
		"etcd.cluster.yaml",
	)
}

func etcdClusterYaml() (*asset, error) {
	bytes, err := etcdClusterYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd.cluster.yaml", size: 685, mode: os.FileMode(436), modTime: time.Unix(1501625447, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdClusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x4f\xf4\x30\x0c\x86\xf7\xfc\x8a\xa8\xdf\xf6\x49\x0d\xba\x0d\x75\x65\xb8\x85\x89\x81\xdd\x4d\x0c\x58\xd7\xc4\x91\xed\x54\xc0\xe9\xfe\x3b\x2a\x2d\x12\x52\x41\xdc\xe8\xf8\xc9\xf3\xc6\xf1\x3f\x7f\x3e\xfb\x70\xc4\x72\x4f\x05\xfd\xe5\xe2\xa0\xd2\x23\x8a\x12\x97\xc1\xcb\x08\x31\x40\xb3\x17\x16\x7a\x07\x23\x2e\xe1\x74\xab\x81\xf8\x66\x3e\x8c\x68\x70\x70\x27\x2a\x69\xf0\x77\x53\x53\x43\x79\xe0\x09\x5d\x46\x83\x04\x06\x83\xf3\xbe\x40\xc6\xc1\xa3\xc5\xd4\x73\x45\x01\x63\x71\xd2\x26\xd4\xc1\xf5\x1e\x2a\x1d\x85\x5b\xd5\x85\xec\x3f\xa9\xb0\x5c\x1c\x41\x31\x44\x16\x64\x0d\x91\xb3\xf3\x5e\x50\xb9\x49\xc4\x6f\x64\x5c\x13\xd5\x79\x3f\xa3\x8c\x5b\xa7\xfb\xdf\xed\xc5\x50\x09\x5f\x0d\xcb\x32\x92\x6e\xef\xdf\x4b\x63\x53\xe3\xfc\x75\x98\xf0\x89\x0a\x2d\x03\x5f\x93\xa0\xc6\x02\xcf\xf8\xab\x7b\xeb\xc7\x09\x54\xf1\x1a\x61\xd7\xed\x25\x95\x93\xae\x36\x94\x99\x22\xae\x05\x96\x54\x99\x8a\xad\x55\x5d\x16\xa7\x86\xc5\x66\x9e\x5a\x5e\x12\x29\x6f\xe0\x8c\x2b\xf5\xf7\x77\x55\xdd\xa7\x27\xac\x13\xbf\xe5\x9f\x1d\x1f\x01\x00\x00\xff\xff\x94\xa8\x58\x07\x44\x02\x00\x00")

func etcdClusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdClusterroleYaml,
		"etcd.clusterrole.yaml",
	)
}

func etcdClusterroleYaml() (*asset, error) {
	bytes, err := etcdClusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd.clusterrole.yaml", size: 580, mode: os.FileMode(436), modTime: time.Unix(1501625922, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdClusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xbd\x4e\x03\x31\x10\xc4\xf1\xde\x4f\xb1\x12\x75\x8c\xd2\x21\x77\x40\x91\x06\x51\x04\x44\xbf\xe7\x1b\xc2\x92\x3b\xaf\xb5\x5e\xa7\xe0\x74\xef\x8e\xf8\xe8\x08\x69\x47\xfa\x6b\x7e\x57\xb4\x2c\x14\x77\x28\x0f\x52\x40\xeb\x1a\xb8\xca\x0b\xac\x89\x96\x44\x36\x70\x8e\xdc\xfd\x4d\x4d\x3e\xd8\x45\x4b\x3c\xde\xb4\x28\x7a\x7d\xda\x0e\x70\xde\x86\xa3\x94\x31\xd1\xfd\xd4\x9b\xc3\xf6\x3a\xe1\x4e\xca\x28\xe5\x10\x66\x38\x8f\xec\x9c\x02\x51\xe1\x19\x89\xe0\x79\xdc\x68\x85\xb1\xab\xa5\x65\x89\xcf\x6c\x07\xf8\x23\xcf\x68\x95\x33\xd6\x35\x98\x4e\xd8\xe3\xf5\xab\xe1\x2a\x3b\xd3\x5e\x2f\x20\x02\xd1\x9f\xfb\xf3\x6f\xa1\xf5\xe1\x1d\xd9\x5b\x0a\x9b\xdf\xe6\x09\x76\x92\x8c\xdb\x9c\xb5\x17\xff\x27\xfb\x59\xbf\x75\x89\xe8\x2c\xf9\x33\x00\x00\xff\xff\xad\xde\x16\x58\x40\x01\x00\x00")

func etcdClusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdClusterrolebindingYaml,
		"etcd.clusterrolebinding.yaml",
	)
}

func etcdClusterrolebindingYaml() (*asset, error) {
	bytes, err := etcdClusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd.clusterrolebinding.yaml", size: 320, mode: os.FileMode(436), modTime: time.Unix(1500317678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _etcdServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc8\xb1\x0a\x02\x31\x0c\x06\xe0\xbd\x4f\x11\x70\xf6\xc0\x35\x9b\x93\x8b\xb8\x28\xee\x21\xfd\x91\x20\x97\x96\x5c\xbc\xa5\xf4\xdd\x5d\x74\xfd\x0e\x34\x06\x2d\x17\xf8\xd5\x1c\x34\x67\x91\x6e\x4f\xc4\x66\xcd\x99\xf6\x53\x79\x9b\x57\xa6\x3b\x62\x37\xc5\x59\xb5\x7d\x3c\xcb\x8a\x94\x2a\x29\x5c\x88\x5c\x56\x30\x21\xb5\x1e\x5b\x47\x48\xb6\xf8\xe9\xd6\x45\xc1\x34\xc6\xf2\x90\x78\x21\x6f\x7f\x9b\xb3\x7c\x03\x00\x00\xff\xff\x94\xdf\xda\xee\x77\x00\x00\x00")

func etcdServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_etcdServiceaccountYaml,
		"etcd.serviceaccount.yaml",
	)
}

func etcdServiceaccountYaml() (*asset, error) {
	bytes, err := etcdServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "etcd.serviceaccount.yaml", size: 119, mode: os.FileMode(436), modTime: time.Unix(1500317678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ingesterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x6f\x9b\x40\x10\x85\xef\xfc\x8a\x91\x7a\x36\xd4\x6d\xa4\xaa\x7b\x8c\x8d\x2a\x4b\xa9\x8d\x6c\x2b\xd7\x68\x80\x09\x5e\x65\x99\x5d\xed\x0e\x56\x2c\xc4\x7f\xaf\x48\x63\x0c\x35\x52\xf7\x04\x33\xf3\xbe\x37\x6f\xbe\x40\xdb\x42\xfc\x8b\xf8\x49\x33\x41\xd7\x45\xe8\xf4\x33\xf9\xa0\x2d\x2b\xa0\x77\x21\xee\x3f\x43\x72\x5e\xe6\x24\xb8\x8c\xde\x34\x97\x0a\xd6\xe4\x8c\xbd\xd4\xc4\x12\xd5\x24\x58\xa2\xa0\x8a\x00\x18\x6b\x52\xa0\xb9\xa2\x20\xe4\x17\x8d\xab\x9b\xcf\x6a\x70\x58\x90\x82\xb6\x8d\x8f\xe8\x2b\x92\xed\xb5\xd6\x75\x51\x70\x54\xf4\x6a\x4f\xce\xe8\x02\x83\x82\x65\x04\x20\x54\x3b\x83\x42\x7d\x07\x60\xec\xd2\x3f\x83\x39\x99\x70\xfd\x03\x40\xe7\xee\x8d\x01\xae\xe8\xfe\x15\x96\x05\x35\x93\x1f\x64\x8b\x7f\x16\x1e\x68\xba\xc6\x8a\x14\xe4\xe2\xcb\x3c\x69\xdb\x38\x7b\x7d\xef\xba\xeb\x94\x1a\x42\x7c\xde\xa9\xeb\xa6\xc2\xac\x31\x26\xb3\x46\x17\x97\x8f\xc0\xab\xc1\x37\xde\x4c\xdb\x23\x21\xf1\xf9\x16\xe6\xb6\x59\x7a\x5c\xad\x5f\xd2\xed\x3a\xdb\x6d\xb6\xc7\x51\x1f\xe0\x8c\xa6\x21\x05\x27\x11\xa7\x92\x84\xa4\x28\xd5\xb7\xef\x3f\x7e\xce\x30\xf6\xe9\x2a\xdd\x3c\xa7\xfb\x97\x6c\xb7\x7b\x9a\x63\xb4\x6d\x7c\xd0\x42\x1b\x7e\xb5\xf1\x8a\xdc\x29\x3e\x08\x56\x9a\xab\xcc\x5a\x33\x5a\xf1\x46\x7c\x3c\xee\xd7\x8f\xc3\x5a\x87\x39\xe6\xc7\xe9\x16\xb9\xb5\x12\xc4\xa3\x53\x0f\x0f\xcb\xaf\xc3\xdc\xd9\x9a\xa6\xa6\xdf\xb6\x61\x09\x73\xa9\x0b\x72\xa7\xc5\x1b\x5d\xbc\xe6\x6a\x02\xaf\x7b\x49\x86\x72\x52\xd0\x47\x4e\xfa\xc1\x64\x32\xe1\x09\xcb\x1d\x9b\x8b\x02\xf1\x0d\x45\x63\xbf\x91\xd5\x7f\x8c\x02\x15\x9e\x44\x4d\xc0\x7f\x6b\xdb\x7b\xd9\x9f\x00\x00\x00\xff\xff\xce\x84\x7c\x30\x41\x03\x00\x00")

func ingesterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_ingesterDeploymentYaml,
		"ingester.deployment.yaml",
	)
}

func ingesterDeploymentYaml() (*asset, error) {
	bytes, err := ingesterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ingester.deployment.yaml", size: 833, mode: os.FileMode(436), modTime: time.Unix(1500317534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mrplotterDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\x4d\x8f\xda\x30\x10\xbd\xe7\x57\x8c\xe8\x39\x81\xb0\x6c\x3f\x7c\x5c\x40\x15\x52\x4b\xa3\x82\x7a\xad\x8c\x99\xa5\x56\x1d\xdb\xb5\x07\xb4\xc8\xf2\x7f\xaf\x92\xdd\x84\xb8\x0a\xa7\xfa\x94\xbc\x99\xf7\x3c\x6f\x3c\xf3\x0e\x42\x80\xe2\x33\xea\x2f\x52\x23\xc4\x98\x71\x2b\x7f\xa0\xf3\xd2\x68\x06\xf8\x42\xa8\x9b\x4f\x3f\xbd\x94\x07\x24\x5e\x66\xbf\xa5\x3e\x32\x58\xa1\x55\xe6\x5a\xa3\xa6\xac\x46\xe2\x47\x4e\x9c\x65\x00\x9a\xd7\xc8\xa0\x76\x56\x19\x22\x74\x6f\x88\xb7\x5c\x20\x83\x10\x8a\x3d\x77\x27\xa4\x6d\x87\xc5\x98\x79\x8b\xa2\x61\x3a\xb4\x4a\x0a\xee\x19\x94\x19\x00\x61\x6d\x15\x27\x6c\x22\x00\xc3\x1b\x9a\xa3\xf8\x01\x95\xef\xfe\x00\xb8\xb5\xe9\xa5\x00\x9d\x6c\x73\x84\xd1\xc4\xa5\x46\xd7\x53\xf2\x91\x42\x5f\x8f\xac\xf9\x09\x19\x1c\xc8\x1d\x0f\xd3\x10\x8a\xea\xf9\x25\xc6\x3e\x8d\xf5\x16\xde\x3a\x14\x63\xca\xac\xce\x4a\x55\x46\x49\x71\x6d\xed\x2e\xfb\x9b\x8b\x4d\x1a\x1e\x10\x1d\x7a\x73\x76\x02\x07\x86\x1a\xf0\xcf\x19\x3d\x25\x58\xd3\x88\xda\xb8\x2b\x83\xc9\xfc\xf1\xfd\x57\x39\x49\x62\xc2\x9e\x19\x4c\xca\xd9\x6c\x56\x0f\x03\x4a\xd6\xf2\xae\xcc\x63\x39\x1f\x97\x99\xa7\x32\xa8\x2f\x43\x85\xae\x7d\xeb\xfd\x72\xf5\x73\xbd\x5d\x55\xdf\x36\xdb\x7d\xa2\x72\xe1\xea\x8c\x0c\x7e\x11\x59\x36\x9d\x22\x89\x23\x9b\x3f\x7c\xf8\x34\xa2\xf1\xb4\xff\xbe\x7a\xea\x45\x76\x63\x2a\xed\x63\xe4\x07\x63\xc8\x93\xe3\x96\x2d\x16\xe5\xac\xcf\xb3\xc6\x0d\xed\xe5\xb7\xd7\xae\x8c\x23\x06\x8b\xc5\xc3\x40\xd3\x3a\x43\x46\x18\xc5\x60\xbf\xac\xee\x93\x3e\xce\xee\x72\xf2\x3c\x4f\x36\xe4\xd2\x6d\xc4\x0e\xdd\x45\x0a\xfc\xcf\x75\x48\x87\xfb\x9f\xc1\xee\x86\xba\xf7\x9c\xb7\x9f\x7d\xbd\xd4\xca\x25\x16\x5e\x2b\x68\xde\x61\x90\xde\xf5\x64\x98\xdf\x61\x37\x82\xcf\xa0\xdd\x7f\xa7\xb9\xda\x54\x9e\x85\xe0\xb8\x3e\x21\x14\x3b\x49\xb8\xd1\xcf\xa6\x58\xdf\xa2\x6d\xe9\x79\xe3\x29\xc6\x10\x50\x1f\x5b\xc0\xa3\x42\x41\xc6\x8d\xba\xf9\x1b\x00\x00\xff\xff\xce\xaa\x2f\xf1\x79\x04\x00\x00")

func mrplotterDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_mrplotterDeploymentYaml,
		"mrplotter.deployment.yaml",
	)
}

func mrplotterDeploymentYaml() (*asset, error) {
	bytes, err := mrplotterDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mrplotter.deployment.yaml", size: 1145, mode: os.FileMode(436), modTime: time.Unix(1500317534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pmu2btrdbDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xc1\x8e\x9b\x30\x10\xbd\xf3\x15\xa3\xed\x19\xd2\x6c\x23\x75\xeb\xe3\x26\xa8\x42\xaa\xb2\x28\x41\x7b\x5d\x19\x33\x9b\x5a\x35\xb6\x65\x26\x68\x23\xcb\xff\x5e\xc1\x06\x02\x11\x3d\x75\x4e\x66\xc6\x6f\xe6\x3d\xcf\xe3\x0b\x78\x0f\xc9\x4f\xd4\xbf\xa4\x46\x08\x21\xe2\x56\xbe\xa2\x6b\xa4\xd1\x0c\xf0\x83\x50\x77\xc7\x66\xd5\xae\x4b\x24\xbe\x8e\xfe\x48\x5d\x31\xd8\xa1\x55\xe6\x52\xa3\xa6\xa8\x46\xe2\x15\x27\xce\x22\x00\xcd\x6b\x64\x60\xeb\xf3\x63\x49\xae\x2a\xaf\x99\xc6\x72\x81\x0c\xbc\x4f\x0a\xee\x4e\x48\xfb\x21\x17\x42\xd4\x58\x14\x1d\xd2\xa1\x55\x52\xf0\x86\xc1\x26\x02\x20\xac\xad\xe2\x84\x5d\x05\x60\x3a\xa1\x0b\xc5\x4b\x54\xcd\xf0\x05\xc0\xad\x9d\x0f\x05\x18\xda\x76\x21\x8c\x26\x2e\x35\xba\x11\x12\x2f\x10\xfd\x0c\x59\xf3\x13\x32\xe8\x93\x2b\xef\x93\xfc\xfd\x23\x84\xf1\x1a\x1b\x25\x5c\x5f\x28\x84\x39\x32\x3f\x2b\x95\x1b\x25\xc5\xa5\x97\xbb\x1d\x27\x27\xd9\xbc\x3c\x01\xa2\x6e\x6f\x52\x6e\xdc\xd2\x62\xbb\x7b\x4b\xf7\xbb\xfc\x25\xdb\x17\x93\x3a\x40\xcb\xd5\x19\x19\xfc\x26\xb2\x6c\xb5\x42\x12\x15\x7b\xfc\xf6\xfd\xc7\x42\x8f\x43\xba\x4d\xb3\xd7\xf4\xf0\x96\xbf\x1c\x16\x7b\x3c\xac\x9f\x9e\x36\x0f\x0b\xc8\xe7\xe2\xb0\x7b\x1e\xc7\x1f\x97\xb0\xfd\x8b\xc4\xa5\x31\xd4\x90\xe3\x96\x6d\x36\xeb\xaf\xe3\x3d\x6b\x1c\x4d\x36\x14\xdf\x96\x90\x1b\x47\x0c\xba\xb9\x93\xa6\xd6\x19\x32\xc2\x28\x06\xc5\x36\x9f\xe4\xef\xd6\x14\xab\x93\xb8\x44\x71\x1c\xcf\x4c\xda\x0e\xa6\x3c\xa2\x6b\xa5\xc0\xff\x74\xe4\xdc\x5f\x77\xde\x1a\x7c\x35\xea\x8b\xfb\xe3\x44\x10\xf5\x0d\x3f\x55\xde\x11\xff\xa7\x22\xe8\x7f\x34\xa7\xb9\xca\xf2\x86\x79\xef\xb8\x3e\x21\x24\x47\x49\x98\xe9\x77\x93\xa4\xb7\x6a\x4f\x30\xee\x98\x87\xe0\x3d\xea\xaa\x4f\x34\xa8\x50\x90\x71\x8b\x9c\xff\x06\x00\x00\xff\xff\x4e\x48\x2b\xc4\xe2\x03\x00\x00")

func pmu2btrdbDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_pmu2btrdbDeploymentYaml,
		"pmu2btrdb.deployment.yaml",
	)
}

func pmu2btrdbDeploymentYaml() (*asset, error) {
	bytes, err := pmu2btrdbDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pmu2btrdb.deployment.yaml", size: 994, mode: os.FileMode(436), modTime: time.Unix(1500317534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xb1\x8e\xdb\x30\x0c\xdd\xf5\x15\x04\xb2\xdc\x01\x8d\x6f\x2d\x6e\xbc\x76\xe9\xd4\x02\x0d\xda\xf1\x42\x4b\xb4\xad\x46\x16\x0d\x91\x4a\x91\xbf\x2f\x28\x3b\x97\xf4\xda\xd1\x22\xfd\xde\xe3\xe3\xe3\x0e\xbe\x96\x40\x25\xe6\xd1\xb9\xc3\x44\x30\xd4\x94\x20\xb0\xaf\x33\x65\x45\x8d\x9c\xc1\x63\x86\x9e\x60\xe0\x9a\x03\x70\x06\x99\xb1\xe8\x58\x62\xe8\x44\xb9\xd0\x07\xe8\xab\xc2\x44\x85\x20\x0a\xe8\x44\xc0\x86\xe8\x2e\x5c\x41\x26\xae\x29\x80\x2f\x84\x4a\xa0\x53\xcc\xa3\x3c\x3b\xb7\xdb\xed\x60\x4c\xdc\x63\x72\x5f\x06\x7b\x96\xeb\xaf\x43\x2c\xa2\xa0\x71\x26\x88\x59\x14\x53\x8a\x79\x84\x97\x43\xf9\xfc\x62\xd4\xad\xf5\xf4\x51\xc0\xa7\x2a\x4a\x05\x1e\x50\x80\x97\x85\x85\x02\x28\xbb\x09\xcf\xd6\xcf\x99\x00\x53\x21\x0c\x17\x88\x19\x10\x42\x1c\x06\x2a\x94\x15\x32\xce\x24\x0b\x7a\x7a\x34\xbe\x7c\x95\xb6\xaa\x59\xe9\xdd\xf1\x78\x74\xeb\xc3\x13\xa9\x0f\xdd\x46\x56\x38\x51\x77\xc1\x39\xb5\x86\x36\x84\xe7\x42\xce\x7d\xba\x8e\x47\x20\xe4\x0b\xa9\x6c\x73\x3c\x98\x07\x73\x15\x05\x4c\xc2\x30\xe1\x99\x20\x98\x38\x6b\xfd\xf6\x03\x96\xc2\xe7\x18\xa8\x3c\x76\x70\xb8\x1a\x28\x3c\x93\x9b\xa3\x88\x0d\x12\xd8\x0b\x60\xcf\x55\x41\x27\xd4\xe6\xb4\x61\x66\x6a\xf3\xae\x88\x08\xb6\x07\x1c\xc9\x27\x14\x01\x8f\x29\x51\x80\xa3\x49\xdf\xf7\xe8\x4f\x75\xd9\x8f\x9e\xf6\x4b\x38\x3a\xf7\x7d\xd5\xf7\xdc\x46\x30\xf5\x4f\xab\xe2\x57\x4f\xcb\xf4\x7a\xa2\x8b\x25\xa1\x93\x69\xad\xad\xe6\xbc\x62\x98\x63\xb6\xa2\x15\xec\xc7\x83\x39\x17\x18\x8c\xe2\x0e\xea\xbd\x59\x7d\xcc\xc1\xe0\x9a\x67\xb7\x0e\xa1\x72\x8e\x9e\xd0\x7b\xae\x59\xdf\x55\xf7\xbc\x50\x41\xe5\xd2\x05\x5a\x12\x5f\x2c\x86\xef\x01\x36\x8a\xdb\x2e\x9a\x9e\xdf\x18\x15\x06\x2e\x66\x50\x01\x9d\x0a\x51\x13\x08\x0b\x07\x31\xb3\x7a\x82\xba\x00\xe6\x00\xa5\xe6\xdc\x72\x72\x6a\x9f\x81\xb7\x18\x84\xfe\xd9\xdd\xc6\xb9\xbe\x75\xbf\xb8\xbf\x71\xfd\xbc\xd2\xb4\x85\x28\xc3\x10\x73\x94\x09\xf8\x84\x97\x86\xa6\x9b\x39\xbd\x96\xd0\xdf\xc1\xb5\xef\x4e\x14\x95\x86\x9a\x84\xf4\x2e\x4b\xff\x80\xf6\xf4\x26\x72\x53\x68\x91\x29\x24\x7a\xaf\xb0\x2d\xc6\x73\x16\x4b\xe6\x7f\xfd\x9a\xcb\x92\x58\xcd\xac\x5b\xf9\xe9\xef\x0c\xc7\x3c\x16\x12\x71\xed\x60\xed\xd6\x37\xb2\xed\x1d\x50\x01\xf3\x05\x44\x71\x24\xc0\xc1\xae\xce\xca\x06\x0f\x13\x0a\xf4\xf4\x76\x46\xc1\xfd\x09\x00\x00\xff\xff\x84\xbd\xb2\x2d\x4f\x04\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"readme.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "readme.md", size: 1103, mode: os.FileMode(436), modTime: time.Unix(1500318188, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _receiverDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4f\x6f\xa3\x3e\x10\xbd\xf3\x29\x46\xf9\x9d\x21\x7f\xfa\x5b\x6d\xd7\xb7\x55\x8a\xaa\x48\x6d\x82\xd2\xa8\xd7\xca\x31\x53\x62\xd5\xd8\x5e\x63\x50\x91\xc5\x77\x5f\x39\x2d\x04\xb7\xb4\xa7\xf5\xc9\xcc\xf8\xbd\x99\x79\x36\xef\x3f\x70\x0e\x92\x5b\x94\x77\x5c\x22\x74\x5d\x44\x35\x7f\x44\x53\x71\x25\x09\xe0\xab\x45\xe9\xb7\xd5\xbc\x59\x1e\xd1\xd2\x65\xf4\xc2\x65\x4e\xe0\x06\xb5\x50\x6d\x89\xd2\x46\x25\x5a\x9a\x53\x4b\x49\x04\x20\x69\x89\x04\x0c\x32\xe4\x0d\x9a\xb8\xd6\x65\xfd\x1e\xad\x34\x65\x48\xc0\xb9\xe4\x40\x4d\x81\x76\xdb\xc7\xba\x2e\xaa\x34\x32\x8f\x36\xa8\x05\x67\xb4\x22\xb0\x8a\x00\x2c\x96\x5a\x50\x8b\x3e\x03\x30\xae\xe2\x97\xa0\x47\x14\x55\xff\x05\x40\xb5\xfe\x5c\x18\xa0\xa7\xf6\x8b\x29\x69\x29\x97\x68\x06\x58\xfc\xa1\xe1\x81\x8d\x97\xb4\x40\x02\x47\x6b\xf2\xe3\xdc\xb9\x24\x7b\x7e\xed\xba\xfe\x14\x19\x86\x78\xd7\xa9\xeb\x42\x60\x56\x0b\x91\x29\xc1\x59\x7b\x1e\x78\x3d\xd4\x4d\x36\x61\x7a\x04\x34\x58\xa9\xda\x30\x1c\x8d\xe4\x83\x7f\x6a\xac\x6c\x10\xf3\x52\x94\xca\xb4\x04\x66\x3f\x96\xab\x7b\x3e\x0b\x72\x4c\xd7\x04\x66\xcb\xc5\x62\x51\x8e\x13\x82\x97\xfc\x4b\x9a\xe5\x62\xf5\xff\x34\xcf\x2a\xe4\x41\xd9\x8c\x29\x7a\xf5\xd2\xc3\xfa\xe6\x29\xdd\xde\x64\xbb\xcd\xf6\x10\xb0\x34\x54\xd4\x48\xe0\x64\xad\x26\xf3\x39\x5a\x96\x93\xd5\xd5\xcf\x5f\x13\x1c\xfb\x74\x9d\x6e\x1e\xd3\xfd\x53\xb6\xdb\x4f\x72\xcc\x96\xd7\xd7\x57\xb3\xef\x91\xbb\xbb\x29\xa4\x73\xc9\x03\xb7\xb8\x91\xcf\x2a\x59\xa3\x3e\x25\x0f\x96\x16\x5c\x16\x99\x52\x62\x74\x01\x13\x8c\xb7\xe9\x36\xdd\xff\x3e\x6c\x76\xdb\xe9\x8e\x16\x97\x7e\x1a\x25\xea\x12\xef\x55\x2d\x43\x99\x7b\x4e\x86\xfa\x14\xbf\x60\x6b\xb8\x2c\xc2\x5b\xf0\x90\x8c\xda\x13\x01\x2f\xd0\xdc\x1f\x9c\x07\x27\x0c\xd2\x7c\x27\x45\x4b\xc0\x9a\x1a\x87\x94\x56\x66\x5c\x2a\xbe\x3c\xef\x4c\x19\x4b\xc0\xeb\x35\xe2\xd1\x46\x59\xc5\x94\x20\x70\x58\x67\xa3\xf8\x87\x3f\x56\x60\x41\x59\x1b\x8d\x87\x0a\x8a\x7c\x3b\x4d\x85\xcc\xa0\x0d\x5f\xd9\x5b\x6c\xfb\x19\x16\xc7\x71\x60\x35\x4d\x6f\x2d\x0f\x68\x1a\xce\xf0\x1f\xf8\x4a\xe8\x12\x13\x0e\xd1\xbb\xc3\xa0\x65\x7c\xde\x8e\xc4\xb3\x67\xd2\x37\x45\xa7\x44\xfa\x4a\x3e\x6f\x9c\x46\x52\xb1\xc9\x2a\xe2\x9c\xa1\xb2\x40\xb8\x3c\xc3\xf4\x92\x3d\xb7\x19\xfb\xfe\xbb\xce\x39\x94\xf9\x39\x50\xa1\x40\x66\x95\xf9\xb2\xf3\xbf\x01\x00\x00\xff\xff\xd5\x7c\x86\xa7\xb6\x05\x00\x00")

func receiverDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_receiverDeploymentYaml,
		"receiver.deployment.yaml",
	)
}

func receiverDeploymentYaml() (*asset, error) {
	bytes, err := receiverDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "receiver.deployment.yaml", size: 1462, mode: os.FileMode(436), modTime: time.Unix(1500317534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _secret_ceph_keyringSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x3f\x6f\xab\x30\x14\xc5\x77\x7f\x8a\x13\x12\x89\xf7\x06\x83\xde\x1b\x23\x31\x75\xe8\x52\x75\xea\x16\x65\x30\xf6\x05\x2c\x88\x8d\xec\x8b\x14\x44\xf8\xee\x55\xfe\xa9\x6a\x9b\xb4\x55\x97\x3b\x9d\x7b\xfe\xfc\x96\x8b\xbc\xb4\x2e\x2f\x55\x6c\xc4\x12\xd3\x84\xec\x91\xdc\x93\x75\x84\x79\x16\x4b\x70\x63\x23\x74\x20\xc5\x14\xc1\x0d\x41\x53\xdf\x40\x7b\x57\xd9\x1a\x91\x74\x20\x16\x91\x18\x92\xf6\xc2\x56\xd8\x60\x01\x49\xc8\x89\x75\x7e\x54\x9e\x4e\x76\x94\x63\x2b\xb8\x21\x27\x00\x80\x74\xe3\x91\x3c\xf8\xa1\x33\x70\x9e\xd1\x79\xad\xf8\xe6\x57\x72\xd6\xef\x2d\xe3\x9f\xa8\xec\x17\x11\x9d\x25\xc7\x99\x32\x3b\xeb\xb2\x96\xc6\x60\x5d\xfd\x8b\xc8\x1b\x2e\x1f\x2b\xf4\x43\x6c\xcc\xdb\xa3\x68\x87\x92\x34\x77\x17\x48\x17\x26\x90\x0e\xd3\x94\xbd\xa8\x50\x13\x3f\xab\x1d\xc5\x5e\x69\x9a\x67\xd4\xe4\x28\x58\x7d\xc2\x28\xaf\x3d\xa5\xac\x82\xdf\xc9\xca\x76\x54\xdc\x5f\xf3\x59\xe5\x5d\x25\x7a\xdf\x1b\x21\xce\xa9\xc5\xea\x8f\x56\xfc\x23\x34\x38\xa0\x0e\xd4\x23\x69\x69\x4c\x70\x80\x1e\x18\xd2\xa4\x45\x0a\x59\xfd\xc7\x01\x1c\x20\x0d\xd2\xcd\xfa\x54\x7c\xbd\x4d\xff\xde\x19\xfa\x6e\x50\x28\x8d\xfc\x06\x80\x94\x3c\xf6\x54\x24\x47\xb7\xe0\x88\x29\x66\xd6\xe7\xa1\x34\xc9\x75\x60\x67\x99\x82\xea\x8a\x96\xc6\x62\x35\x9d\xed\x66\xf1\x1a\x00\x00\xff\xff\xb0\x7e\xf0\xc6\xa8\x02\x00\x00")

func secret_ceph_keyringShBytes() ([]byte, error) {
	return bindataRead(
		_secret_ceph_keyringSh,
		"secret_ceph_keyring.sh",
	)
}

func secret_ceph_keyringSh() (*asset, error) {
	bytes, err := secret_ceph_keyringShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "secret_ceph_keyring.sh", size: 680, mode: os.FileMode(436), modTime: time.Unix(1500317678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"adminconsole.deployment.yaml": adminconsoleDeploymentYaml,
	"btrdb.statefulset.yaml": btrdbStatefulsetYaml,
	"c37ingress.deployment.yaml": c37ingressDeploymentYaml,
	"create_admin_key.sh": create_admin_keySh,
	"createdb.job.yaml": createdbJobYaml,
	"ensuredb.job.yaml": ensuredbJobYaml,
	"etcd-operator.deployment.yaml": etcdOperatorDeploymentYaml,
	"etcd.cluster.yaml": etcdClusterYaml,
	"etcd.clusterrole.yaml": etcdClusterroleYaml,
	"etcd.clusterrolebinding.yaml": etcdClusterrolebindingYaml,
	"etcd.serviceaccount.yaml": etcdServiceaccountYaml,
	"ingester.deployment.yaml": ingesterDeploymentYaml,
	"mrplotter.deployment.yaml": mrplotterDeploymentYaml,
	"pmu2btrdb.deployment.yaml": pmu2btrdbDeploymentYaml,
	"readme.md": readmeMd,
	"receiver.deployment.yaml": receiverDeploymentYaml,
	"secret_ceph_keyring.sh": secret_ceph_keyringSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"adminconsole.deployment.yaml": &bintree{adminconsoleDeploymentYaml, map[string]*bintree{}},
	"btrdb.statefulset.yaml": &bintree{btrdbStatefulsetYaml, map[string]*bintree{}},
	"c37ingress.deployment.yaml": &bintree{c37ingressDeploymentYaml, map[string]*bintree{}},
	"create_admin_key.sh": &bintree{create_admin_keySh, map[string]*bintree{}},
	"createdb.job.yaml": &bintree{createdbJobYaml, map[string]*bintree{}},
	"ensuredb.job.yaml": &bintree{ensuredbJobYaml, map[string]*bintree{}},
	"etcd-operator.deployment.yaml": &bintree{etcdOperatorDeploymentYaml, map[string]*bintree{}},
	"etcd.cluster.yaml": &bintree{etcdClusterYaml, map[string]*bintree{}},
	"etcd.clusterrole.yaml": &bintree{etcdClusterroleYaml, map[string]*bintree{}},
	"etcd.clusterrolebinding.yaml": &bintree{etcdClusterrolebindingYaml, map[string]*bintree{}},
	"etcd.serviceaccount.yaml": &bintree{etcdServiceaccountYaml, map[string]*bintree{}},
	"ingester.deployment.yaml": &bintree{ingesterDeploymentYaml, map[string]*bintree{}},
	"mrplotter.deployment.yaml": &bintree{mrplotterDeploymentYaml, map[string]*bintree{}},
	"pmu2btrdb.deployment.yaml": &bintree{pmu2btrdbDeploymentYaml, map[string]*bintree{}},
	"readme.md": &bintree{readmeMd, map[string]*bintree{}},
	"receiver.deployment.yaml": &bintree{receiverDeploymentYaml, map[string]*bintree{}},
	"secret_ceph_keyring.sh": &bintree{secret_ceph_keyringSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

